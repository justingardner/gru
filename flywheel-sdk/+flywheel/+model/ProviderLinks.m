% ProviderLinks - Links to providers for containers
%
% ProviderLinks Properties:
%    compute  - Unique database ID
%    storage  - Unique database ID
%
% ProviderLinks Methods:
%    toJson - Convert the object to a Map that can be encoded to json
%    struct - Convert the object to a struct
    classdef ProviderLinks < flywheel.ModelBase
    % NOTE: This file is auto generated by the swagger code generator program.
    % Do not edit the file manually.
    properties (Constant)
        propertyMap = containers.Map({ 'compute', 'storage' }, ...
            { 'compute', 'storage' });
    end
    properties(Dependent)
        compute
        storage
    end
    methods
        function obj = ProviderLinks(varargin)
            obj@flywheel.ModelBase(flywheel.model.ProviderLinks.propertyMap);

            % Allow empty object creation
            if length(varargin)
                p = inputParser;
                addParameter(p, 'compute', []);
                addParameter(p, 'storage', []);

                parse(p, varargin{:});

                if ~isempty(p.Results.compute)
                    obj.props_('compute') = p.Results.compute;
                end
                if ~isempty(p.Results.storage)
                    obj.props_('storage') = p.Results.storage;
                end
            end
        end
        function result = get.compute(obj)
            if ismethod(obj, 'get_compute')
                result = obj.get_compute();
            else
                if isKey(obj.props_, 'compute')
                    result = obj.props_('compute');
                else
                    result = [];
                end
            end
        end
        function obj = set.compute(obj, value)
            obj.props_('compute') = value;
        end
        function result = get.storage(obj)
            if ismethod(obj, 'get_storage')
                result = obj.get_storage();
            else
                if isKey(obj.props_, 'storage')
                    result = obj.props_('storage');
                else
                    result = [];
                end
            end
        end
        function obj = set.storage(obj, value)
            obj.props_('storage') = value;
        end
        function result = toJson(obj)
            result = containers.Map;
            if isKey(obj.props_, 'compute')
                result('compute') = flywheel.ModelBase.serializeValue(obj.props_('compute'), 'char');
            end
            if isKey(obj.props_, 'storage')
                result('storage') = flywheel.ModelBase.serializeValue(obj.props_('storage'), 'char');
            end
        end
        function result = struct(obj)
            result = struct;

            if isKey(obj.props_, 'compute')
                result.compute = obj.props_('compute');
            else
                result.compute = [];
            end
            if isKey(obj.props_, 'storage')
                result.storage = obj.props_('storage');
            else
                result.storage = [];
            end
        end
        function result = returnValue(obj)
            result = obj;
        end
    end
    methods(Access = protected)
        function prpgrp = getPropertyGroups(obj)
            if ~isscalar(obj)
                prpgrp = getPropertyGroups@matlab.mixin.CustomDisplay(obj);
            else
                propList = struct;
                if isKey(obj.props_, 'compute')
                    propList.compute = obj.props_('compute');
                else
                    propList.compute = [];
                end
                if isKey(obj.props_, 'storage')
                    propList.storage = obj.props_('storage');
                else
                    propList.storage = [];
                end
                prpgrp = matlab.mixin.util.PropertyGroup(propList);
            end
        end
    end
    methods(Static)
        function obj = fromJson(json, context)
            obj =  flywheel.model.ProviderLinks;
            if isfield(json, 'compute')
                obj.props_('compute') = flywheel.ModelBase.deserializeValue(json.compute, 'char');
            end
            if isfield(json, 'storage')
                obj.props_('storage') = flywheel.ModelBase.deserializeValue(json.storage, 'char');
            end
            if isprop(obj, 'context_')
                obj.setContext_(context);
            end
        end
        function obj = ensureIsInstance(obj)
            if ~isempty(obj)
                % Realistically, we only convert structs
                if ~isa(obj, 'flywheel.model.ProviderLinks')
                    obj = flywheel.model.ProviderLinks(obj);
                end
                if isKey(obj.props_, 'compute')
                end
                if isKey(obj.props_, 'storage')
                end
            end
        end
    end
end
