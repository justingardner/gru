% Provider
%
% Provider Properties:
%    id             - Unique database ID
%    providerClass  - The provider class - one of compute or storage
%    providerType   - The provider type (e.g. static or gcloud)
%    label          - A human readable label for the provider
%    origin        
%    created        - Creation time (automatically set)
%    modified       - Last modification time (automatically updated)
%    config         - The provider-specific configuration fields.
%    creds          - The provider-specific credential fields.
%
% Provider Methods:
%    toJson - Convert the object to a Map that can be encoded to json
%    struct - Convert the object to a struct
    classdef Provider < flywheel.ModelBase
    % NOTE: This file is auto generated by the swagger code generator program.
    % Do not edit the file manually.
    properties (Constant)
        propertyMap = containers.Map({ 'id', 'providerClass', 'providerType', 'label', 'origin', 'created', 'modified', 'config', 'creds' }, ...
            { '_id', 'provider_class', 'provider_type', 'label', 'origin', 'created', 'modified', 'config', 'creds' });
    end
    properties(Dependent)
        id
        providerClass
        providerType
        label
        origin
        created
        modified
        config
        creds
    end
    methods
        function obj = Provider(varargin)
            obj@flywheel.ModelBase(flywheel.model.Provider.propertyMap);

            % Allow empty object creation
            if length(varargin)
                p = inputParser;
                addParameter(p, 'id', []);
                addParameter(p, 'providerClass', []);
                addParameter(p, 'providerType', []);
                addParameter(p, 'label', []);
                addParameter(p, 'origin', []);
                addParameter(p, 'created', []);
                addParameter(p, 'modified', []);
                addParameter(p, 'config', []);
                addParameter(p, 'creds', []);

                parse(p, varargin{:});

                if ~isempty(p.Results.id)
                    obj.props_('_id') = p.Results.id;
                end
                if ~isempty(p.Results.providerClass)
                    obj.props_('provider_class') = p.Results.providerClass;
                end
                if ~isempty(p.Results.providerType)
                    obj.props_('provider_type') = p.Results.providerType;
                end
                if ~isempty(p.Results.label)
                    obj.props_('label') = p.Results.label;
                end
                if ~isempty(p.Results.origin)
                    obj.props_('origin') = p.Results.origin;
                end
                if ~isempty(p.Results.created)
                    obj.props_('created') = p.Results.created;
                end
                if ~isempty(p.Results.modified)
                    obj.props_('modified') = p.Results.modified;
                end
                if ~isempty(p.Results.config)
                    obj.props_('config') = p.Results.config;
                end
                if ~isempty(p.Results.creds)
                    obj.props_('creds') = p.Results.creds;
                end
            end
        end
        function result = get.id(obj)
            if ismethod(obj, 'get_id')
                result = obj.get_id();
            else
                if isKey(obj.props_, '_id')
                    result = obj.props_('_id');
                else
                    result = [];
                end
            end
        end
        function obj = set.id(obj, value)
            obj.props_('_id') = value;
        end
        function result = get.providerClass(obj)
            if ismethod(obj, 'get_providerClass')
                result = obj.get_providerClass();
            else
                if isKey(obj.props_, 'provider_class')
                    result = obj.props_('provider_class');
                else
                    result = [];
                end
            end
        end
        function obj = set.providerClass(obj, value)
            obj.props_('provider_class') = value;
        end
        function result = get.providerType(obj)
            if ismethod(obj, 'get_providerType')
                result = obj.get_providerType();
            else
                if isKey(obj.props_, 'provider_type')
                    result = obj.props_('provider_type');
                else
                    result = [];
                end
            end
        end
        function obj = set.providerType(obj, value)
            obj.props_('provider_type') = value;
        end
        function result = get.label(obj)
            if ismethod(obj, 'get_label')
                result = obj.get_label();
            else
                if isKey(obj.props_, 'label')
                    result = obj.props_('label');
                else
                    result = [];
                end
            end
        end
        function obj = set.label(obj, value)
            obj.props_('label') = value;
        end
        function result = get.origin(obj)
            if ismethod(obj, 'get_origin')
                result = obj.get_origin();
            else
                if isKey(obj.props_, 'origin')
                    result = obj.props_('origin');
                else
                    result = [];
                end
            end
        end
        function obj = set.origin(obj, value)
            obj.props_('origin') = value;
        end
        function result = get.created(obj)
            if ismethod(obj, 'get_created')
                result = obj.get_created();
            else
                if isKey(obj.props_, 'created')
                    result = obj.props_('created');
                else
                    result = [];
                end
            end
        end
        function obj = set.created(obj, value)
            obj.props_('created') = value;
        end
        function result = get.modified(obj)
            if ismethod(obj, 'get_modified')
                result = obj.get_modified();
            else
                if isKey(obj.props_, 'modified')
                    result = obj.props_('modified');
                else
                    result = [];
                end
            end
        end
        function obj = set.modified(obj, value)
            obj.props_('modified') = value;
        end
        function result = get.config(obj)
            if ismethod(obj, 'get_config')
                result = obj.get_config();
            else
                if isKey(obj.props_, 'config')
                    result = obj.props_('config');
                else
                    result = [];
                end
            end
        end
        function obj = set.config(obj, value)
            obj.props_('config') = value;
        end
        function result = get.creds(obj)
            if ismethod(obj, 'get_creds')
                result = obj.get_creds();
            else
                if isKey(obj.props_, 'creds')
                    result = obj.props_('creds');
                else
                    result = [];
                end
            end
        end
        function obj = set.creds(obj, value)
            obj.props_('creds') = value;
        end
        function result = toJson(obj)
            result = containers.Map;
            if isKey(obj.props_, '_id')
                result('_id') = flywheel.ModelBase.serializeValue(obj.props_('_id'), 'char');
            end
            if isKey(obj.props_, 'provider_class')
                result('provider_class') = flywheel.ModelBase.serializeValue(obj.props_('provider_class'), 'char');
            end
            if isKey(obj.props_, 'provider_type')
                result('provider_type') = flywheel.ModelBase.serializeValue(obj.props_('provider_type'), 'char');
            end
            if isKey(obj.props_, 'label')
                result('label') = flywheel.ModelBase.serializeValue(obj.props_('label'), 'char');
            end
            if isKey(obj.props_, 'origin')
                result('origin') = obj.props_('origin').toJson();
            end
            if isKey(obj.props_, 'created')
                result('created') = flywheel.ModelBase.serializeValue(obj.props_('created'), 'datetime');
            end
            if isKey(obj.props_, 'modified')
                result('modified') = flywheel.ModelBase.serializeValue(obj.props_('modified'), 'datetime');
            end
            if isKey(obj.props_, 'config')
                result('config') = flywheel.ModelBase.serializeValue(obj.props_('config'), 'containers.Map');
            end
            if isKey(obj.props_, 'creds')
                result('creds') = flywheel.ModelBase.serializeValue(obj.props_('creds'), 'containers.Map');
            end
        end
        function result = struct(obj)
            result = struct;

            if isKey(obj.props_, '_id')
                result.id = obj.props_('_id');
            else
                result.id = [];
            end
            if isKey(obj.props_, 'provider_class')
                result.providerClass = obj.props_('provider_class');
            else
                result.providerClass = [];
            end
            if isKey(obj.props_, 'provider_type')
                result.providerType = obj.props_('provider_type');
            else
                result.providerType = [];
            end
            if isKey(obj.props_, 'label')
                result.label = obj.props_('label');
            else
                result.label = [];
            end
            if isKey(obj.props_, 'origin')
                result.origin = struct(obj.props_('origin'));
            else
                result.origin = [];
            end
            if isKey(obj.props_, 'created')
                result.created = obj.props_('created');
            else
                result.created = [];
            end
            if isKey(obj.props_, 'modified')
                result.modified = obj.props_('modified');
            else
                result.modified = [];
            end
            if isKey(obj.props_, 'config')
                result.config = obj.props_('config');
            else
                result.config = [];
            end
            if isKey(obj.props_, 'creds')
                result.creds = obj.props_('creds');
            else
                result.creds = [];
            end
        end
        function result = returnValue(obj)
            result = obj;
        end
    end
    methods(Access = protected)
        function prpgrp = getPropertyGroups(obj)
            if ~isscalar(obj)
                prpgrp = getPropertyGroups@matlab.mixin.CustomDisplay(obj);
            else
                propList = struct;
                if isKey(obj.props_, '_id')
                    propList.id = obj.props_('_id');
                else
                    propList.id = [];
                end
                if isKey(obj.props_, 'provider_class')
                    propList.providerClass = obj.props_('provider_class');
                else
                    propList.providerClass = [];
                end
                if isKey(obj.props_, 'provider_type')
                    propList.providerType = obj.props_('provider_type');
                else
                    propList.providerType = [];
                end
                if isKey(obj.props_, 'label')
                    propList.label = obj.props_('label');
                else
                    propList.label = [];
                end
                if isKey(obj.props_, 'origin')
                    propList.origin = obj.props_('origin');
                else
                    propList.origin = [];
                end
                if isKey(obj.props_, 'created')
                    propList.created = obj.props_('created');
                else
                    propList.created = [];
                end
                if isKey(obj.props_, 'modified')
                    propList.modified = obj.props_('modified');
                else
                    propList.modified = [];
                end
                if isKey(obj.props_, 'config')
                    propList.config = obj.props_('config');
                else
                    propList.config = [];
                end
                if isKey(obj.props_, 'creds')
                    propList.creds = obj.props_('creds');
                else
                    propList.creds = [];
                end
                prpgrp = matlab.mixin.util.PropertyGroup(propList);
            end
        end
    end
    methods(Static)
        function obj = fromJson(json, context)
            obj =  flywheel.model.Provider;
            if isfield(json, 'x0x5Fid')
                obj.props_('_id') = flywheel.ModelBase.deserializeValue(json.x0x5Fid, 'char');
            end
            if isfield(json, 'provider_class')
                obj.props_('provider_class') = flywheel.ModelBase.deserializeValue(json.provider_class, 'char');
            end
            if isfield(json, 'provider_type')
                obj.props_('provider_type') = flywheel.ModelBase.deserializeValue(json.provider_type, 'char');
            end
            if isfield(json, 'label')
                obj.props_('label') = flywheel.ModelBase.deserializeValue(json.label, 'char');
            end
            if isfield(json, 'origin')
                obj.props_('origin') = flywheel.model.Origin.fromJson(json.origin, context);
            end
            if isfield(json, 'created')
                obj.props_('created') = flywheel.ModelBase.deserializeValue(json.created, 'datetime');
            end
            if isfield(json, 'modified')
                obj.props_('modified') = flywheel.ModelBase.deserializeValue(json.modified, 'datetime');
            end
            if isfield(json, 'config')
                obj.props_('config') = flywheel.ModelBase.deserializeValue(json.config, 'containers.Map');
            end
            if isfield(json, 'creds')
                obj.props_('creds') = flywheel.ModelBase.deserializeValue(json.creds, 'containers.Map');
            end
            if isprop(obj, 'context_')
                obj.setContext_(context);
            end
        end
        function obj = ensureIsInstance(obj)
            if ~isempty(obj)
                % Realistically, we only convert structs
                if ~isa(obj, 'flywheel.model.Provider')
                    obj = flywheel.model.Provider(obj);
                end
                if isKey(obj.props_, '_id')
                end
                if isKey(obj.props_, 'provider_class')
                end
                if isKey(obj.props_, 'provider_type')
                end
                if isKey(obj.props_, 'label')
                end
                if isKey(obj.props_, 'origin')
                    obj.props_('origin') =  flywheel.model.Origin.ensureIsInstance(obj.props_('origin'));
                end
                if isKey(obj.props_, 'created')
                end
                if isKey(obj.props_, 'modified')
                end
                if isKey(obj.props_, 'config')
                end
                if isKey(obj.props_, 'creds')
                end
            end
        end
    end
end
