% UserJobsOutput
%
% UserJobsOutput Properties:
%    stats 
%    total 
%    jobs  
%
% UserJobsOutput Methods:
%    toJson - Convert the object to a Map that can be encoded to json
%    struct - Convert the object to a struct
    classdef UserJobsOutput < flywheel.ModelBase
    % NOTE: This file is auto generated by the swagger code generator program.
    % Do not edit the file manually.
    properties (Constant)
        propertyMap = containers.Map({ 'stats', 'total', 'jobs' }, ...
            { 'stats', 'total', 'jobs' });
    end
    properties(Dependent)
        stats
        total
        jobs
    end
    methods
        function obj = UserJobsOutput(varargin)
            obj@flywheel.ModelBase(flywheel.model.UserJobsOutput.propertyMap);

            % Allow empty object creation
            if length(varargin)
                p = inputParser;
                addParameter(p, 'stats', []);
                addParameter(p, 'total', []);
                addParameter(p, 'jobs', []);

                parse(p, varargin{:});

                if ~isempty(p.Results.stats)
                    obj.props_('stats') = p.Results.stats;
                end
                if ~isempty(p.Results.total)
                    obj.props_('total') = p.Results.total;
                end
                if ~isempty(p.Results.jobs)
                    obj.props_('jobs') = p.Results.jobs;
                end
            end
        end
        function result = get.stats(obj)
            if ismethod(obj, 'get_stats')
                result = obj.get_stats();
            else
                if isKey(obj.props_, 'stats')
                    result = obj.props_('stats');
                else
                    result = [];
                end
            end
        end
        function obj = set.stats(obj, value)
            obj.props_('stats') = value;
        end
        function result = get.total(obj)
            if ismethod(obj, 'get_total')
                result = obj.get_total();
            else
                if isKey(obj.props_, 'total')
                    result = obj.props_('total');
                else
                    result = [];
                end
            end
        end
        function obj = set.total(obj, value)
            obj.props_('total') = value;
        end
        function result = get.jobs(obj)
            if ismethod(obj, 'get_jobs')
                result = obj.get_jobs();
            else
                if isKey(obj.props_, 'jobs')
                    result = obj.props_('jobs');
                else
                    result = [];
                end
            end
        end
        function obj = set.jobs(obj, value)
            obj.props_('jobs') = value;
        end
        function result = toJson(obj)
            result = containers.Map;
            if isKey(obj.props_, 'stats')
                result('stats') = obj.props_('stats').toJson();
            end
            if isKey(obj.props_, 'total')
                result('total') = flywheel.ModelBase.serializeValue(obj.props_('total'), 'integer');
            end
            if isKey(obj.props_, 'jobs')
                result('jobs') = flywheel.ModelBase.cellmap(@toJson, obj.props_('jobs'));
            end
        end
        function result = struct(obj)
            result = struct;

            if isKey(obj.props_, 'stats')
                result.stats = struct(obj.props_('stats'));
            else
                result.stats = [];
            end
            if isKey(obj.props_, 'total')
                result.total = obj.props_('total');
            else
                result.total = [];
            end
            if isKey(obj.props_, 'jobs')
                result.jobs = flywheel.ModelBase.cellmap(@struct, obj.props_('jobs'));
            else
                result.jobs = [];
            end
        end
        function result = returnValue(obj)
            result = obj;
        end
    end
    methods(Access = protected)
        function prpgrp = getPropertyGroups(obj)
            if ~isscalar(obj)
                prpgrp = getPropertyGroups@matlab.mixin.CustomDisplay(obj);
            else
                propList = struct;
                if isKey(obj.props_, 'stats')
                    propList.stats = obj.props_('stats');
                else
                    propList.stats = [];
                end
                if isKey(obj.props_, 'total')
                    propList.total = obj.props_('total');
                else
                    propList.total = [];
                end
                if isKey(obj.props_, 'jobs')
                    propList.jobs = obj.props_('jobs');
                else
                    propList.jobs = [];
                end
                prpgrp = matlab.mixin.util.PropertyGroup(propList);
            end
        end
    end
    methods(Static)
        function obj = fromJson(json, context)
            obj =  flywheel.model.UserJobsOutput;
            if isfield(json, 'stats')
                obj.props_('stats') = flywheel.model.JobStatsByState.fromJson(json.stats, context);
            end
            if isfield(json, 'total')
                obj.props_('total') = flywheel.ModelBase.deserializeValue(json.total, 'integer');
            end
            if isfield(json, 'jobs')
                obj.props_('jobs') = flywheel.ModelBase.cellmap(@(x) flywheel.model.JobListEntry.fromJson(x, context), json.jobs);
            end
            if isprop(obj, 'context_')
                obj.setContext_(context);
            end
        end
        function obj = ensureIsInstance(obj)
            if ~isempty(obj)
                % Realistically, we only convert structs
                if ~isa(obj, 'flywheel.model.UserJobsOutput')
                    obj = flywheel.model.UserJobsOutput(obj);
                end
                if isKey(obj.props_, 'stats')
                    obj.props_('stats') =  flywheel.model.JobStatsByState.ensureIsInstance(obj.props_('stats'));
                end
                if isKey(obj.props_, 'total')
                end
                if isKey(obj.props_, 'jobs')
                    obj.props_('jobs') = flywheel.ModelBase.cellmap(@flywheel.model.JobListEntry.ensureIsInstance, obj.props_('jobs'));
                end
            end
        end
    end
end
