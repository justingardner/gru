% JobInputsArrayItem
%
% JobInputsArrayItem Properties:
%    type   - The type of container (e.g. session)
%    id     - Unique database ID
%    name   - The name of the file on disk
%    input 
%    base  
%    found 
%
% JobInputsArrayItem Methods:
%    toJson - Convert the object to a Map that can be encoded to json
%    struct - Convert the object to a struct
    classdef JobInputsArrayItem < flywheel.ModelBase
    % NOTE: This file is auto generated by the swagger code generator program.
    % Do not edit the file manually.
    properties (Constant)
        propertyMap = containers.Map({ 'type', 'id', 'name', 'input', 'base', 'found' }, ...
            { 'type', 'id', 'name', 'input', 'base', 'found' });
    end
    properties(Dependent)
        type
        id
        name
        input
        base
        found
    end
    methods
        function obj = JobInputsArrayItem(varargin)
            obj@flywheel.ModelBase(flywheel.model.JobInputsArrayItem.propertyMap);

            % Allow empty object creation
            if length(varargin)
                p = inputParser;
                addParameter(p, 'type', []);
                addParameter(p, 'id', []);
                addParameter(p, 'name', []);
                addParameter(p, 'input', []);
                addParameter(p, 'base', []);
                addParameter(p, 'found', []);

                parse(p, varargin{:});

                if ~isempty(p.Results.type)
                    obj.props_('type') = p.Results.type;
                end
                if ~isempty(p.Results.id)
                    obj.props_('id') = p.Results.id;
                end
                if ~isempty(p.Results.name)
                    obj.props_('name') = p.Results.name;
                end
                if ~isempty(p.Results.input)
                    obj.props_('input') = p.Results.input;
                end
                if ~isempty(p.Results.base)
                    obj.props_('base') = p.Results.base;
                end
                if ~isempty(p.Results.found)
                    obj.props_('found') = p.Results.found;
                end
            end
        end
        function result = get.type(obj)
            if ismethod(obj, 'get_type')
                result = obj.get_type();
            else
                if isKey(obj.props_, 'type')
                    result = obj.props_('type');
                else
                    result = [];
                end
            end
        end
        function obj = set.type(obj, value)
            obj.props_('type') = value;
        end
        function result = get.id(obj)
            if ismethod(obj, 'get_id')
                result = obj.get_id();
            else
                if isKey(obj.props_, 'id')
                    result = obj.props_('id');
                else
                    result = [];
                end
            end
        end
        function obj = set.id(obj, value)
            obj.props_('id') = value;
        end
        function result = get.name(obj)
            if ismethod(obj, 'get_name')
                result = obj.get_name();
            else
                if isKey(obj.props_, 'name')
                    result = obj.props_('name');
                else
                    result = [];
                end
            end
        end
        function obj = set.name(obj, value)
            obj.props_('name') = value;
        end
        function result = get.input(obj)
            if ismethod(obj, 'get_input')
                result = obj.get_input();
            else
                if isKey(obj.props_, 'input')
                    result = obj.props_('input');
                else
                    result = [];
                end
            end
        end
        function obj = set.input(obj, value)
            obj.props_('input') = value;
        end
        function result = get.base(obj)
            if ismethod(obj, 'get_base')
                result = obj.get_base();
            else
                if isKey(obj.props_, 'base')
                    result = obj.props_('base');
                else
                    result = [];
                end
            end
        end
        function obj = set.base(obj, value)
            obj.props_('base') = value;
        end
        function result = get.found(obj)
            if ismethod(obj, 'get_found')
                result = obj.get_found();
            else
                if isKey(obj.props_, 'found')
                    result = obj.props_('found');
                else
                    result = [];
                end
            end
        end
        function obj = set.found(obj, value)
            obj.props_('found') = value;
        end
        function result = toJson(obj)
            result = containers.Map;
            if isKey(obj.props_, 'type')
                result('type') = flywheel.ModelBase.serializeValue(obj.props_('type'), 'char');
            end
            if isKey(obj.props_, 'id')
                result('id') = flywheel.ModelBase.serializeValue(obj.props_('id'), 'char');
            end
            if isKey(obj.props_, 'name')
                result('name') = flywheel.ModelBase.serializeValue(obj.props_('name'), 'char');
            end
            if isKey(obj.props_, 'input')
                result('input') = flywheel.ModelBase.serializeValue(obj.props_('input'), 'char');
            end
            if isKey(obj.props_, 'base')
                result('base') = flywheel.ModelBase.serializeValue(obj.props_('base'), 'char');
            end
            if isKey(obj.props_, 'found')
                result('found') = flywheel.ModelBase.serializeValue(obj.props_('found'), 'logical');
            end
        end
        function result = struct(obj)
            result = struct;

            if isKey(obj.props_, 'type')
                result.type = obj.props_('type');
            else
                result.type = [];
            end
            if isKey(obj.props_, 'id')
                result.id = obj.props_('id');
            else
                result.id = [];
            end
            if isKey(obj.props_, 'name')
                result.name = obj.props_('name');
            else
                result.name = [];
            end
            if isKey(obj.props_, 'input')
                result.input = obj.props_('input');
            else
                result.input = [];
            end
            if isKey(obj.props_, 'base')
                result.base = obj.props_('base');
            else
                result.base = [];
            end
            if isKey(obj.props_, 'found')
                result.found = obj.props_('found');
            else
                result.found = [];
            end
        end
        function result = returnValue(obj)
            result = obj;
        end
    end
    methods(Access = protected)
        function prpgrp = getPropertyGroups(obj)
            if ~isscalar(obj)
                prpgrp = getPropertyGroups@matlab.mixin.CustomDisplay(obj);
            else
                propList = struct;
                if isKey(obj.props_, 'type')
                    propList.type = obj.props_('type');
                else
                    propList.type = [];
                end
                if isKey(obj.props_, 'id')
                    propList.id = obj.props_('id');
                else
                    propList.id = [];
                end
                if isKey(obj.props_, 'name')
                    propList.name = obj.props_('name');
                else
                    propList.name = [];
                end
                if isKey(obj.props_, 'input')
                    propList.input = obj.props_('input');
                else
                    propList.input = [];
                end
                if isKey(obj.props_, 'base')
                    propList.base = obj.props_('base');
                else
                    propList.base = [];
                end
                if isKey(obj.props_, 'found')
                    propList.found = obj.props_('found');
                else
                    propList.found = [];
                end
                prpgrp = matlab.mixin.util.PropertyGroup(propList);
            end
        end
    end
    methods(Static)
        function obj = fromJson(json, context)
            obj =  flywheel.model.JobInputsArrayItem;
            if isfield(json, 'type')
                obj.props_('type') = flywheel.ModelBase.deserializeValue(json.type, 'char');
            end
            if isfield(json, 'id')
                obj.props_('id') = flywheel.ModelBase.deserializeValue(json.id, 'char');
            end
            if isfield(json, 'name')
                obj.props_('name') = flywheel.ModelBase.deserializeValue(json.name, 'char');
            end
            if isfield(json, 'input')
                obj.props_('input') = flywheel.ModelBase.deserializeValue(json.input, 'char');
            end
            if isfield(json, 'base')
                obj.props_('base') = flywheel.ModelBase.deserializeValue(json.base, 'char');
            end
            if isfield(json, 'found')
                obj.props_('found') = flywheel.ModelBase.deserializeValue(json.found, 'logical');
            end
            if isprop(obj, 'context_')
                obj.setContext_(context);
            end
        end
        function obj = ensureIsInstance(obj)
            if ~isempty(obj)
                % Realistically, we only convert structs
                if ~isa(obj, 'flywheel.model.JobInputsArrayItem')
                    obj = flywheel.model.JobInputsArrayItem(obj);
                end
                if isKey(obj.props_, 'type')
                end
                if isKey(obj.props_, 'id')
                end
                if isKey(obj.props_, 'name')
                end
                if isKey(obj.props_, 'input')
                end
                if isKey(obj.props_, 'base')
                end
                if isKey(obj.props_, 'found')
                end
            end
        end
    end
end
