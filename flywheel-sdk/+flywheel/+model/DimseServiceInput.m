% DimseServiceInput
%
% DimseServiceInput Properties:
%    aet   - DICOM Application Entity Title
%    host  - DICOM service hostname or IP
%    port  - DICOM service port number
%
% DimseServiceInput Methods:
%    toJson - Convert the object to a Map that can be encoded to json
%    struct - Convert the object to a struct
    classdef DimseServiceInput < flywheel.ModelBase
    % NOTE: This file is auto generated by the swagger code generator program.
    % Do not edit the file manually.
    properties (Constant)
        propertyMap = containers.Map({ 'aet', 'host', 'port' }, ...
            { 'aet', 'host', 'port' });
    end
    properties(Dependent)
        aet
        host
        port
    end
    methods
        function obj = DimseServiceInput(varargin)
            obj@flywheel.ModelBase(flywheel.model.DimseServiceInput.propertyMap);

            % Allow empty object creation
            if length(varargin)
                p = inputParser;
                addParameter(p, 'aet', []);
                addParameter(p, 'host', []);
                addParameter(p, 'port', []);

                parse(p, varargin{:});

                if ~isempty(p.Results.aet)
                    obj.props_('aet') = p.Results.aet;
                end
                if ~isempty(p.Results.host)
                    obj.props_('host') = p.Results.host;
                end
                if ~isempty(p.Results.port)
                    obj.props_('port') = p.Results.port;
                end
            end
        end
        function result = get.aet(obj)
            if ismethod(obj, 'get_aet')
                result = obj.get_aet();
            else
                if isKey(obj.props_, 'aet')
                    result = obj.props_('aet');
                else
                    result = [];
                end
            end
        end
        function obj = set.aet(obj, value)
            obj.props_('aet') = value;
        end
        function result = get.host(obj)
            if ismethod(obj, 'get_host')
                result = obj.get_host();
            else
                if isKey(obj.props_, 'host')
                    result = obj.props_('host');
                else
                    result = [];
                end
            end
        end
        function obj = set.host(obj, value)
            obj.props_('host') = value;
        end
        function result = get.port(obj)
            if ismethod(obj, 'get_port')
                result = obj.get_port();
            else
                if isKey(obj.props_, 'port')
                    result = obj.props_('port');
                else
                    result = [];
                end
            end
        end
        function obj = set.port(obj, value)
            obj.props_('port') = value;
        end
        function result = toJson(obj)
            result = containers.Map;
            if isKey(obj.props_, 'aet')
                result('aet') = flywheel.ModelBase.serializeValue(obj.props_('aet'), 'char');
            end
            if isKey(obj.props_, 'host')
                result('host') = flywheel.ModelBase.serializeValue(obj.props_('host'), 'char');
            end
            if isKey(obj.props_, 'port')
                result('port') = flywheel.ModelBase.serializeValue(obj.props_('port'), 'integer');
            end
        end
        function result = struct(obj)
            result = struct;

            if isKey(obj.props_, 'aet')
                result.aet = obj.props_('aet');
            else
                result.aet = [];
            end
            if isKey(obj.props_, 'host')
                result.host = obj.props_('host');
            else
                result.host = [];
            end
            if isKey(obj.props_, 'port')
                result.port = obj.props_('port');
            else
                result.port = [];
            end
        end
        function result = returnValue(obj)
            result = obj;
        end
    end
    methods(Access = protected)
        function prpgrp = getPropertyGroups(obj)
            if ~isscalar(obj)
                prpgrp = getPropertyGroups@matlab.mixin.CustomDisplay(obj);
            else
                propList = struct;
                if isKey(obj.props_, 'aet')
                    propList.aet = obj.props_('aet');
                else
                    propList.aet = [];
                end
                if isKey(obj.props_, 'host')
                    propList.host = obj.props_('host');
                else
                    propList.host = [];
                end
                if isKey(obj.props_, 'port')
                    propList.port = obj.props_('port');
                else
                    propList.port = [];
                end
                prpgrp = matlab.mixin.util.PropertyGroup(propList);
            end
        end
    end
    methods(Static)
        function obj = fromJson(json, context)
            obj =  flywheel.model.DimseServiceInput;
            if isfield(json, 'aet')
                obj.props_('aet') = flywheel.ModelBase.deserializeValue(json.aet, 'char');
            end
            if isfield(json, 'host')
                obj.props_('host') = flywheel.ModelBase.deserializeValue(json.host, 'char');
            end
            if isfield(json, 'port')
                obj.props_('port') = flywheel.ModelBase.deserializeValue(json.port, 'integer');
            end
            if isprop(obj, 'context_')
                obj.setContext_(context);
            end
        end
        function obj = ensureIsInstance(obj)
            if ~isempty(obj)
                % Realistically, we only convert structs
                if ~isa(obj, 'flywheel.model.DimseServiceInput')
                    obj = flywheel.model.DimseServiceInput(obj);
                end
                if isKey(obj.props_, 'aet')
                end
                if isKey(obj.props_, 'host')
                end
                if isKey(obj.props_, 'port')
                end
            end
        end
    end
end
