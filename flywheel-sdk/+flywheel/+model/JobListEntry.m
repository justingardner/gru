% JobListEntry
%
% JobListEntry Properties:
%    id             - Unique database ID
%    origin        
%    gearId        
%    gearInfo      
%    previousJobId 
%    inputs        
%    destination   
%    tags          
%    state         
%    attempt       
%    created        - Creation time (automatically set)
%    modified       - Last modification time (automatically updated)
%    retried        - Retried time (automatically set)
%    config        
%    request       
%    savedFiles    
%
% JobListEntry Methods:
%    toJson - Convert the object to a Map that can be encoded to json
%    struct - Convert the object to a struct
    classdef JobListEntry < flywheel.ModelBase & flywheel.mixins.JobMixin
    % NOTE: This file is auto generated by the swagger code generator program.
    % Do not edit the file manually.
    properties (Constant)
        propertyMap = containers.Map({ 'id', 'origin', 'gearId', 'gearInfo', 'previousJobId', 'inputs', 'destination', 'tags', 'state', 'attempt', 'created', 'modified', 'retried', 'config', 'request', 'savedFiles' }, ...
            { '_id', 'origin', 'gear_id', 'gear_info', 'previous_job_id', 'inputs', 'destination', 'tags', 'state', 'attempt', 'created', 'modified', 'retried', 'config', 'request', 'saved_files' });
    end
    properties(Dependent)
        id
        origin
        gearId
        gearInfo
        previousJobId
        inputs
        destination
        tags
        state
        attempt
        created
        modified
        retried
        config
        request
        savedFiles
    end
    methods
        function obj = JobListEntry(varargin)
            obj@flywheel.ModelBase(flywheel.model.JobListEntry.propertyMap);

            % Allow empty object creation
            if length(varargin)
                p = inputParser;
                addParameter(p, 'id', []);
                addParameter(p, 'origin', []);
                addParameter(p, 'gearId', []);
                addParameter(p, 'gearInfo', []);
                addParameter(p, 'previousJobId', []);
                addParameter(p, 'inputs', []);
                addParameter(p, 'destination', []);
                addParameter(p, 'tags', []);
                addParameter(p, 'state', []);
                addParameter(p, 'attempt', []);
                addParameter(p, 'created', []);
                addParameter(p, 'modified', []);
                addParameter(p, 'retried', []);
                addParameter(p, 'config', []);
                addParameter(p, 'request', []);
                addParameter(p, 'savedFiles', []);

                parse(p, varargin{:});

                if ~isempty(p.Results.id)
                    obj.props_('_id') = p.Results.id;
                end
                if ~isempty(p.Results.origin)
                    obj.props_('origin') = p.Results.origin;
                end
                if ~isempty(p.Results.gearId)
                    obj.props_('gear_id') = p.Results.gearId;
                end
                if ~isempty(p.Results.gearInfo)
                    obj.props_('gear_info') = p.Results.gearInfo;
                end
                if ~isempty(p.Results.previousJobId)
                    obj.props_('previous_job_id') = p.Results.previousJobId;
                end
                if ~isempty(p.Results.inputs)
                    obj.props_('inputs') = p.Results.inputs;
                end
                if ~isempty(p.Results.destination)
                    obj.props_('destination') = p.Results.destination;
                end
                if ~isempty(p.Results.tags)
                    obj.props_('tags') = p.Results.tags;
                end
                if ~isempty(p.Results.state)
                    obj.props_('state') = p.Results.state;
                end
                if ~isempty(p.Results.attempt)
                    obj.props_('attempt') = p.Results.attempt;
                end
                if ~isempty(p.Results.created)
                    obj.props_('created') = p.Results.created;
                end
                if ~isempty(p.Results.modified)
                    obj.props_('modified') = p.Results.modified;
                end
                if ~isempty(p.Results.retried)
                    obj.props_('retried') = p.Results.retried;
                end
                if ~isempty(p.Results.config)
                    obj.props_('config') = p.Results.config;
                end
                if ~isempty(p.Results.request)
                    obj.props_('request') = p.Results.request;
                end
                if ~isempty(p.Results.savedFiles)
                    obj.props_('saved_files') = p.Results.savedFiles;
                end
            end
        end
        function result = get.id(obj)
            if ismethod(obj, 'get_id')
                result = obj.get_id();
            else
                if isKey(obj.props_, '_id')
                    result = obj.props_('_id');
                else
                    result = [];
                end
            end
        end
        function obj = set.id(obj, value)
            obj.props_('_id') = value;
        end
        function result = get.origin(obj)
            if ismethod(obj, 'get_origin')
                result = obj.get_origin();
            else
                if isKey(obj.props_, 'origin')
                    result = obj.props_('origin');
                else
                    result = [];
                end
            end
        end
        function obj = set.origin(obj, value)
            obj.props_('origin') = value;
        end
        function result = get.gearId(obj)
            if ismethod(obj, 'get_gearId')
                result = obj.get_gearId();
            else
                if isKey(obj.props_, 'gear_id')
                    result = obj.props_('gear_id');
                else
                    result = [];
                end
            end
        end
        function obj = set.gearId(obj, value)
            obj.props_('gear_id') = value;
        end
        function result = get.gearInfo(obj)
            if ismethod(obj, 'get_gearInfo')
                result = obj.get_gearInfo();
            else
                if isKey(obj.props_, 'gear_info')
                    result = obj.props_('gear_info');
                else
                    result = [];
                end
            end
        end
        function obj = set.gearInfo(obj, value)
            obj.props_('gear_info') = value;
        end
        function result = get.previousJobId(obj)
            if ismethod(obj, 'get_previousJobId')
                result = obj.get_previousJobId();
            else
                if isKey(obj.props_, 'previous_job_id')
                    result = obj.props_('previous_job_id');
                else
                    result = [];
                end
            end
        end
        function obj = set.previousJobId(obj, value)
            obj.props_('previous_job_id') = value;
        end
        function result = get.inputs(obj)
            if ismethod(obj, 'get_inputs')
                result = obj.get_inputs();
            else
                if isKey(obj.props_, 'inputs')
                    result = obj.props_('inputs');
                else
                    result = [];
                end
            end
        end
        function obj = set.inputs(obj, value)
            obj.props_('inputs') = value;
        end
        function result = get.destination(obj)
            if ismethod(obj, 'get_destination')
                result = obj.get_destination();
            else
                if isKey(obj.props_, 'destination')
                    result = obj.props_('destination');
                else
                    result = [];
                end
            end
        end
        function obj = set.destination(obj, value)
            obj.props_('destination') = value;
        end
        function result = get.tags(obj)
            if ismethod(obj, 'get_tags')
                result = obj.get_tags();
            else
                if isKey(obj.props_, 'tags')
                    result = obj.props_('tags');
                else
                    result = [];
                end
            end
        end
        function obj = set.tags(obj, value)
            obj.props_('tags') = value;
        end
        function result = get.state(obj)
            if ismethod(obj, 'get_state')
                result = obj.get_state();
            else
                if isKey(obj.props_, 'state')
                    result = obj.props_('state');
                else
                    result = [];
                end
            end
        end
        function obj = set.state(obj, value)
            obj.props_('state') = value;
        end
        function result = get.attempt(obj)
            if ismethod(obj, 'get_attempt')
                result = obj.get_attempt();
            else
                if isKey(obj.props_, 'attempt')
                    result = obj.props_('attempt');
                else
                    result = [];
                end
            end
        end
        function obj = set.attempt(obj, value)
            obj.props_('attempt') = value;
        end
        function result = get.created(obj)
            if ismethod(obj, 'get_created')
                result = obj.get_created();
            else
                if isKey(obj.props_, 'created')
                    result = obj.props_('created');
                else
                    result = [];
                end
            end
        end
        function obj = set.created(obj, value)
            obj.props_('created') = value;
        end
        function result = get.modified(obj)
            if ismethod(obj, 'get_modified')
                result = obj.get_modified();
            else
                if isKey(obj.props_, 'modified')
                    result = obj.props_('modified');
                else
                    result = [];
                end
            end
        end
        function obj = set.modified(obj, value)
            obj.props_('modified') = value;
        end
        function result = get.retried(obj)
            if ismethod(obj, 'get_retried')
                result = obj.get_retried();
            else
                if isKey(obj.props_, 'retried')
                    result = obj.props_('retried');
                else
                    result = [];
                end
            end
        end
        function obj = set.retried(obj, value)
            obj.props_('retried') = value;
        end
        function result = get.config(obj)
            if ismethod(obj, 'get_config')
                result = obj.get_config();
            else
                if isKey(obj.props_, 'config')
                    result = obj.props_('config');
                else
                    result = [];
                end
            end
        end
        function obj = set.config(obj, value)
            obj.props_('config') = value;
        end
        function result = get.request(obj)
            if ismethod(obj, 'get_request')
                result = obj.get_request();
            else
                if isKey(obj.props_, 'request')
                    result = obj.props_('request');
                else
                    result = [];
                end
            end
        end
        function obj = set.request(obj, value)
            obj.props_('request') = value;
        end
        function result = get.savedFiles(obj)
            if ismethod(obj, 'get_savedFiles')
                result = obj.get_savedFiles();
            else
                if isKey(obj.props_, 'saved_files')
                    result = obj.props_('saved_files');
                else
                    result = [];
                end
            end
        end
        function obj = set.savedFiles(obj, value)
            obj.props_('saved_files') = value;
        end
        function result = toJson(obj)
            result = containers.Map;
            if isKey(obj.props_, '_id')
                result('_id') = flywheel.ModelBase.serializeValue(obj.props_('_id'), 'char');
            end
            if isKey(obj.props_, 'origin')
                result('origin') = obj.props_('origin').toJson();
            end
            if isKey(obj.props_, 'gear_id')
                result('gear_id') = flywheel.ModelBase.serializeValue(obj.props_('gear_id'), 'char');
            end
            if isKey(obj.props_, 'gear_info')
                result('gear_info') = obj.props_('gear_info').toJson();
            end
            if isKey(obj.props_, 'previous_job_id')
                result('previous_job_id') = flywheel.ModelBase.serializeValue(obj.props_('previous_job_id'), 'char');
            end
            if isKey(obj.props_, 'inputs')
                result('inputs') = flywheel.ModelBase.cellmap(@toJson, obj.props_('inputs'));
            end
            if isKey(obj.props_, 'destination')
                result('destination') = obj.props_('destination').toJson();
            end
            if isKey(obj.props_, 'tags')
                result('tags') = flywheel.ModelBase.serializeValue(obj.props_('tags'), 'vector[char]');
            end
            if isKey(obj.props_, 'state')
                result('state') = flywheel.ModelBase.serializeValue(obj.props_('state'), 'char');
            end
            if isKey(obj.props_, 'attempt')
                result('attempt') = flywheel.ModelBase.serializeValue(obj.props_('attempt'), 'integer');
            end
            if isKey(obj.props_, 'created')
                result('created') = flywheel.ModelBase.serializeValue(obj.props_('created'), 'datetime');
            end
            if isKey(obj.props_, 'modified')
                result('modified') = flywheel.ModelBase.serializeValue(obj.props_('modified'), 'datetime');
            end
            if isKey(obj.props_, 'retried')
                result('retried') = flywheel.ModelBase.serializeValue(obj.props_('retried'), 'datetime');
            end
            if isKey(obj.props_, 'config')
                result('config') = obj.props_('config').toJson();
            end
            if isKey(obj.props_, 'request')
                result('request') = obj.props_('request').toJson();
            end
            if isKey(obj.props_, 'saved_files')
                result('saved_files') = flywheel.ModelBase.serializeValue(obj.props_('saved_files'), 'vector[char]');
            end
        end
        function result = struct(obj)
            result = struct;

            if isKey(obj.props_, '_id')
                result.id = obj.props_('_id');
            else
                result.id = [];
            end
            if isKey(obj.props_, 'origin')
                result.origin = struct(obj.props_('origin'));
            else
                result.origin = [];
            end
            if isKey(obj.props_, 'gear_id')
                result.gearId = obj.props_('gear_id');
            else
                result.gearId = [];
            end
            if isKey(obj.props_, 'gear_info')
                result.gearInfo = struct(obj.props_('gear_info'));
            else
                result.gearInfo = [];
            end
            if isKey(obj.props_, 'previous_job_id')
                result.previousJobId = obj.props_('previous_job_id');
            else
                result.previousJobId = [];
            end
            if isKey(obj.props_, 'inputs')
                result.inputs = flywheel.ModelBase.cellmap(@struct, obj.props_('inputs'));
            else
                result.inputs = [];
            end
            if isKey(obj.props_, 'destination')
                result.destination = struct(obj.props_('destination'));
            else
                result.destination = [];
            end
            if isKey(obj.props_, 'tags')
                result.tags = obj.props_('tags');
            else
                result.tags = [];
            end
            if isKey(obj.props_, 'state')
                result.state = obj.props_('state');
            else
                result.state = [];
            end
            if isKey(obj.props_, 'attempt')
                result.attempt = obj.props_('attempt');
            else
                result.attempt = [];
            end
            if isKey(obj.props_, 'created')
                result.created = obj.props_('created');
            else
                result.created = [];
            end
            if isKey(obj.props_, 'modified')
                result.modified = obj.props_('modified');
            else
                result.modified = [];
            end
            if isKey(obj.props_, 'retried')
                result.retried = obj.props_('retried');
            else
                result.retried = [];
            end
            if isKey(obj.props_, 'config')
                result.config = struct(obj.props_('config'));
            else
                result.config = [];
            end
            if isKey(obj.props_, 'request')
                result.request = struct(obj.props_('request'));
            else
                result.request = [];
            end
            if isKey(obj.props_, 'saved_files')
                result.savedFiles = obj.props_('saved_files');
            else
                result.savedFiles = [];
            end
        end
        function result = returnValue(obj)
            result = obj;
        end
    end
    methods(Access = protected)
        function prpgrp = getPropertyGroups(obj)
            if ~isscalar(obj)
                prpgrp = getPropertyGroups@matlab.mixin.CustomDisplay(obj);
            else
                propList = struct;
                if isKey(obj.props_, '_id')
                    propList.id = obj.props_('_id');
                else
                    propList.id = [];
                end
                if isKey(obj.props_, 'origin')
                    propList.origin = obj.props_('origin');
                else
                    propList.origin = [];
                end
                if isKey(obj.props_, 'gear_id')
                    propList.gearId = obj.props_('gear_id');
                else
                    propList.gearId = [];
                end
                if isKey(obj.props_, 'gear_info')
                    propList.gearInfo = obj.props_('gear_info');
                else
                    propList.gearInfo = [];
                end
                if isKey(obj.props_, 'previous_job_id')
                    propList.previousJobId = obj.props_('previous_job_id');
                else
                    propList.previousJobId = [];
                end
                if isKey(obj.props_, 'inputs')
                    propList.inputs = obj.props_('inputs');
                else
                    propList.inputs = [];
                end
                if isKey(obj.props_, 'destination')
                    propList.destination = obj.props_('destination');
                else
                    propList.destination = [];
                end
                if isKey(obj.props_, 'tags')
                    propList.tags = obj.props_('tags');
                else
                    propList.tags = [];
                end
                if isKey(obj.props_, 'state')
                    propList.state = obj.props_('state');
                else
                    propList.state = [];
                end
                if isKey(obj.props_, 'attempt')
                    propList.attempt = obj.props_('attempt');
                else
                    propList.attempt = [];
                end
                if isKey(obj.props_, 'created')
                    propList.created = obj.props_('created');
                else
                    propList.created = [];
                end
                if isKey(obj.props_, 'modified')
                    propList.modified = obj.props_('modified');
                else
                    propList.modified = [];
                end
                if isKey(obj.props_, 'retried')
                    propList.retried = obj.props_('retried');
                else
                    propList.retried = [];
                end
                if isKey(obj.props_, 'config')
                    propList.config = obj.props_('config');
                else
                    propList.config = [];
                end
                if isKey(obj.props_, 'request')
                    propList.request = obj.props_('request');
                else
                    propList.request = [];
                end
                if isKey(obj.props_, 'saved_files')
                    propList.savedFiles = obj.props_('saved_files');
                else
                    propList.savedFiles = [];
                end
                prpgrp = matlab.mixin.util.PropertyGroup(propList);
            end
        end
    end
    methods(Static)
        function obj = fromJson(json, context)
            obj =  flywheel.model.JobListEntry;
            if isfield(json, 'x0x5Fid')
                obj.props_('_id') = flywheel.ModelBase.deserializeValue(json.x0x5Fid, 'char');
            end
            if isfield(json, 'origin')
                obj.props_('origin') = flywheel.model.JobOrigin.fromJson(json.origin, context);
            end
            if isfield(json, 'gear_id')
                obj.props_('gear_id') = flywheel.ModelBase.deserializeValue(json.gear_id, 'char');
            end
            if isfield(json, 'gear_info')
                obj.props_('gear_info') = flywheel.model.GearInfo.fromJson(json.gear_info, context);
            end
            if isfield(json, 'previous_job_id')
                obj.props_('previous_job_id') = flywheel.ModelBase.deserializeValue(json.previous_job_id, 'char');
            end
            if isfield(json, 'inputs')
                obj.props_('inputs') = flywheel.ModelBase.cellmap(@(x) flywheel.model.JobInputsArrayItem.fromJson(x, context), json.inputs);
            end
            if isfield(json, 'destination')
                obj.props_('destination') = flywheel.model.JobDestination.fromJson(json.destination, context);
            end
            if isfield(json, 'tags')
                obj.props_('tags') = flywheel.ModelBase.deserializeValue(json.tags, 'vector[char]');
            end
            if isfield(json, 'state')
                obj.props_('state') = flywheel.ModelBase.deserializeValue(json.state, 'char');
            end
            if isfield(json, 'attempt')
                obj.props_('attempt') = flywheel.ModelBase.deserializeValue(json.attempt, 'integer');
            end
            if isfield(json, 'created')
                obj.props_('created') = flywheel.ModelBase.deserializeValue(json.created, 'datetime');
            end
            if isfield(json, 'modified')
                obj.props_('modified') = flywheel.ModelBase.deserializeValue(json.modified, 'datetime');
            end
            if isfield(json, 'retried')
                obj.props_('retried') = flywheel.ModelBase.deserializeValue(json.retried, 'datetime');
            end
            if isfield(json, 'config')
                obj.props_('config') = flywheel.model.JobConfig.fromJson(json.config, context);
            end
            if isfield(json, 'request')
                obj.props_('request') = flywheel.model.JobRequest.fromJson(json.request, context);
            end
            if isfield(json, 'saved_files')
                obj.props_('saved_files') = flywheel.ModelBase.deserializeValue(json.saved_files, 'vector[char]');
            end
            if isprop(obj, 'context_')
                obj.setContext_(context);
            end
        end
        function obj = ensureIsInstance(obj)
            if ~isempty(obj)
                % Realistically, we only convert structs
                if ~isa(obj, 'flywheel.model.JobListEntry')
                    obj = flywheel.model.JobListEntry(obj);
                end
                if isKey(obj.props_, '_id')
                end
                if isKey(obj.props_, 'origin')
                    obj.props_('origin') =  flywheel.model.JobOrigin.ensureIsInstance(obj.props_('origin'));
                end
                if isKey(obj.props_, 'gear_id')
                end
                if isKey(obj.props_, 'gear_info')
                    obj.props_('gear_info') =  flywheel.model.GearInfo.ensureIsInstance(obj.props_('gear_info'));
                end
                if isKey(obj.props_, 'previous_job_id')
                end
                if isKey(obj.props_, 'inputs')
                    obj.props_('inputs') = flywheel.ModelBase.cellmap(@flywheel.model.JobInputsArrayItem.ensureIsInstance, obj.props_('inputs'));
                end
                if isKey(obj.props_, 'destination')
                    obj.props_('destination') =  flywheel.model.JobDestination.ensureIsInstance(obj.props_('destination'));
                end
                if isKey(obj.props_, 'tags')
                end
                if isKey(obj.props_, 'state')
                end
                if isKey(obj.props_, 'attempt')
                end
                if isKey(obj.props_, 'created')
                end
                if isKey(obj.props_, 'modified')
                end
                if isKey(obj.props_, 'retried')
                end
                if isKey(obj.props_, 'config')
                    obj.props_('config') =  flywheel.model.JobConfig.ensureIsInstance(obj.props_('config'));
                end
                if isKey(obj.props_, 'request')
                    obj.props_('request') =  flywheel.model.JobRequest.ensureIsInstance(obj.props_('request'));
                end
                if isKey(obj.props_, 'saved_files')
                end
            end
        end
    end
end
