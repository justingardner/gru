% JobProfileInput
%
% JobProfileInput Properties:
%    preparationTimeMs  - The length of time taken to download gear container and inputs, in milliseconds
%    elapsedTimeMs      - The runtime of the job, in milliseconds
%    uploadTimeMs       - The length of time taken to upload the job's outputs, in milliseconds
%    versions          
%    executor          
%
% JobProfileInput Methods:
%    toJson - Convert the object to a Map that can be encoded to json
%    struct - Convert the object to a struct
    classdef JobProfileInput < flywheel.ModelBase
    % NOTE: This file is auto generated by the swagger code generator program.
    % Do not edit the file manually.
    properties (Constant)
        propertyMap = containers.Map({ 'preparationTimeMs', 'elapsedTimeMs', 'uploadTimeMs', 'versions', 'executor' }, ...
            { 'preparation_time_ms', 'elapsed_time_ms', 'upload_time_ms', 'versions', 'executor' });
    end
    properties(Dependent)
        preparationTimeMs
        elapsedTimeMs
        uploadTimeMs
        versions
        executor
    end
    methods
        function obj = JobProfileInput(varargin)
            obj@flywheel.ModelBase(flywheel.model.JobProfileInput.propertyMap);

            % Allow empty object creation
            if length(varargin)
                p = inputParser;
                addParameter(p, 'preparationTimeMs', []);
                addParameter(p, 'elapsedTimeMs', []);
                addParameter(p, 'uploadTimeMs', []);
                addParameter(p, 'versions', []);
                addParameter(p, 'executor', []);

                parse(p, varargin{:});

                if ~isempty(p.Results.preparationTimeMs)
                    obj.props_('preparation_time_ms') = p.Results.preparationTimeMs;
                end
                if ~isempty(p.Results.elapsedTimeMs)
                    obj.props_('elapsed_time_ms') = p.Results.elapsedTimeMs;
                end
                if ~isempty(p.Results.uploadTimeMs)
                    obj.props_('upload_time_ms') = p.Results.uploadTimeMs;
                end
                if ~isempty(p.Results.versions)
                    obj.props_('versions') = p.Results.versions;
                end
                if ~isempty(p.Results.executor)
                    obj.props_('executor') = p.Results.executor;
                end
            end
        end
        function result = get.preparationTimeMs(obj)
            if ismethod(obj, 'get_preparationTimeMs')
                result = obj.get_preparationTimeMs();
            else
                if isKey(obj.props_, 'preparation_time_ms')
                    result = obj.props_('preparation_time_ms');
                else
                    result = [];
                end
            end
        end
        function obj = set.preparationTimeMs(obj, value)
            obj.props_('preparation_time_ms') = value;
        end
        function result = get.elapsedTimeMs(obj)
            if ismethod(obj, 'get_elapsedTimeMs')
                result = obj.get_elapsedTimeMs();
            else
                if isKey(obj.props_, 'elapsed_time_ms')
                    result = obj.props_('elapsed_time_ms');
                else
                    result = [];
                end
            end
        end
        function obj = set.elapsedTimeMs(obj, value)
            obj.props_('elapsed_time_ms') = value;
        end
        function result = get.uploadTimeMs(obj)
            if ismethod(obj, 'get_uploadTimeMs')
                result = obj.get_uploadTimeMs();
            else
                if isKey(obj.props_, 'upload_time_ms')
                    result = obj.props_('upload_time_ms');
                else
                    result = [];
                end
            end
        end
        function obj = set.uploadTimeMs(obj, value)
            obj.props_('upload_time_ms') = value;
        end
        function result = get.versions(obj)
            if ismethod(obj, 'get_versions')
                result = obj.get_versions();
            else
                if isKey(obj.props_, 'versions')
                    result = obj.props_('versions');
                else
                    result = [];
                end
            end
        end
        function obj = set.versions(obj, value)
            obj.props_('versions') = value;
        end
        function result = get.executor(obj)
            if ismethod(obj, 'get_executor')
                result = obj.get_executor();
            else
                if isKey(obj.props_, 'executor')
                    result = obj.props_('executor');
                else
                    result = [];
                end
            end
        end
        function obj = set.executor(obj, value)
            obj.props_('executor') = value;
        end
        function result = toJson(obj)
            result = containers.Map;
            if isKey(obj.props_, 'preparation_time_ms')
                result('preparation_time_ms') = flywheel.ModelBase.serializeValue(obj.props_('preparation_time_ms'), 'integer');
            end
            if isKey(obj.props_, 'elapsed_time_ms')
                result('elapsed_time_ms') = flywheel.ModelBase.serializeValue(obj.props_('elapsed_time_ms'), 'integer');
            end
            if isKey(obj.props_, 'upload_time_ms')
                result('upload_time_ms') = flywheel.ModelBase.serializeValue(obj.props_('upload_time_ms'), 'integer');
            end
            if isKey(obj.props_, 'versions')
                result('versions') = obj.props_('versions').toJson();
            end
            if isKey(obj.props_, 'executor')
                result('executor') = obj.props_('executor').toJson();
            end
        end
        function result = struct(obj)
            result = struct;

            if isKey(obj.props_, 'preparation_time_ms')
                result.preparationTimeMs = obj.props_('preparation_time_ms');
            else
                result.preparationTimeMs = [];
            end
            if isKey(obj.props_, 'elapsed_time_ms')
                result.elapsedTimeMs = obj.props_('elapsed_time_ms');
            else
                result.elapsedTimeMs = [];
            end
            if isKey(obj.props_, 'upload_time_ms')
                result.uploadTimeMs = obj.props_('upload_time_ms');
            else
                result.uploadTimeMs = [];
            end
            if isKey(obj.props_, 'versions')
                result.versions = struct(obj.props_('versions'));
            else
                result.versions = [];
            end
            if isKey(obj.props_, 'executor')
                result.executor = struct(obj.props_('executor'));
            else
                result.executor = [];
            end
        end
        function result = returnValue(obj)
            result = obj;
        end
    end
    methods(Access = protected)
        function prpgrp = getPropertyGroups(obj)
            if ~isscalar(obj)
                prpgrp = getPropertyGroups@matlab.mixin.CustomDisplay(obj);
            else
                propList = struct;
                if isKey(obj.props_, 'preparation_time_ms')
                    propList.preparationTimeMs = obj.props_('preparation_time_ms');
                else
                    propList.preparationTimeMs = [];
                end
                if isKey(obj.props_, 'elapsed_time_ms')
                    propList.elapsedTimeMs = obj.props_('elapsed_time_ms');
                else
                    propList.elapsedTimeMs = [];
                end
                if isKey(obj.props_, 'upload_time_ms')
                    propList.uploadTimeMs = obj.props_('upload_time_ms');
                else
                    propList.uploadTimeMs = [];
                end
                if isKey(obj.props_, 'versions')
                    propList.versions = obj.props_('versions');
                else
                    propList.versions = [];
                end
                if isKey(obj.props_, 'executor')
                    propList.executor = obj.props_('executor');
                else
                    propList.executor = [];
                end
                prpgrp = matlab.mixin.util.PropertyGroup(propList);
            end
        end
    end
    methods(Static)
        function obj = fromJson(json, context)
            obj =  flywheel.model.JobProfileInput;
            if isfield(json, 'preparation_time_ms')
                obj.props_('preparation_time_ms') = flywheel.ModelBase.deserializeValue(json.preparation_time_ms, 'integer');
            end
            if isfield(json, 'elapsed_time_ms')
                obj.props_('elapsed_time_ms') = flywheel.ModelBase.deserializeValue(json.elapsed_time_ms, 'integer');
            end
            if isfield(json, 'upload_time_ms')
                obj.props_('upload_time_ms') = flywheel.ModelBase.deserializeValue(json.upload_time_ms, 'integer');
            end
            if isfield(json, 'versions')
                obj.props_('versions') = flywheel.model.JobVersionInfo.fromJson(json.versions, context);
            end
            if isfield(json, 'executor')
                obj.props_('executor') = flywheel.model.JobExecutorInfo.fromJson(json.executor, context);
            end
            if isprop(obj, 'context_')
                obj.setContext_(context);
            end
        end
        function obj = ensureIsInstance(obj)
            if ~isempty(obj)
                % Realistically, we only convert structs
                if ~isa(obj, 'flywheel.model.JobProfileInput')
                    obj = flywheel.model.JobProfileInput(obj);
                end
                if isKey(obj.props_, 'preparation_time_ms')
                end
                if isKey(obj.props_, 'elapsed_time_ms')
                end
                if isKey(obj.props_, 'upload_time_ms')
                end
                if isKey(obj.props_, 'versions')
                    obj.props_('versions') =  flywheel.model.JobVersionInfo.ensureIsInstance(obj.props_('versions'));
                end
                if isKey(obj.props_, 'executor')
                    obj.props_('executor') =  flywheel.model.JobExecutorInfo.ensureIsInstance(obj.props_('executor'));
                end
            end
        end
    end
end
