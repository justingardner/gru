% ReportAccessLogEntry - A single entry in the access log report
%
% ReportAccessLogEntry Properties:
%    id             - The access log entry id
%    accessType     - A named field used in the access log report
%    context       
%    origin        
%    requestMethod  - The http request method (e.g. GET, PUT, POST, DELETE)
%    requestPath    - The HTTP request path (e.g. /api/projects)
%    timestamp     
%
% ReportAccessLogEntry Methods:
%    toJson - Convert the object to a Map that can be encoded to json
%    struct - Convert the object to a struct
    classdef ReportAccessLogEntry < flywheel.ModelBase
    % NOTE: This file is auto generated by the swagger code generator program.
    % Do not edit the file manually.
    properties (Constant)
        propertyMap = containers.Map({ 'id', 'accessType', 'context', 'origin', 'requestMethod', 'requestPath', 'timestamp' }, ...
            { '_id', 'access_type', 'context', 'origin', 'request_method', 'request_path', 'timestamp' });
    end
    properties(Dependent)
        id
        accessType
        context
        origin
        requestMethod
        requestPath
        timestamp
    end
    methods
        function obj = ReportAccessLogEntry(varargin)
            obj@flywheel.ModelBase(flywheel.model.ReportAccessLogEntry.propertyMap);

            % Allow empty object creation
            if length(varargin)
                p = inputParser;
                addParameter(p, 'id', []);
                addParameter(p, 'accessType', []);
                addParameter(p, 'context', []);
                addParameter(p, 'origin', []);
                addParameter(p, 'requestMethod', []);
                addParameter(p, 'requestPath', []);
                addParameter(p, 'timestamp', []);

                parse(p, varargin{:});

                if ~isempty(p.Results.id)
                    obj.props_('_id') = p.Results.id;
                end
                if ~isempty(p.Results.accessType)
                    obj.props_('access_type') = p.Results.accessType;
                end
                if ~isempty(p.Results.context)
                    obj.props_('context') = p.Results.context;
                end
                if ~isempty(p.Results.origin)
                    obj.props_('origin') = p.Results.origin;
                end
                if ~isempty(p.Results.requestMethod)
                    obj.props_('request_method') = p.Results.requestMethod;
                end
                if ~isempty(p.Results.requestPath)
                    obj.props_('request_path') = p.Results.requestPath;
                end
                if ~isempty(p.Results.timestamp)
                    obj.props_('timestamp') = p.Results.timestamp;
                end
            end
        end
        function result = get.id(obj)
            if ismethod(obj, 'get_id')
                result = obj.get_id();
            else
                if isKey(obj.props_, '_id')
                    result = obj.props_('_id');
                else
                    result = [];
                end
            end
        end
        function obj = set.id(obj, value)
            obj.props_('_id') = value;
        end
        function result = get.accessType(obj)
            if ismethod(obj, 'get_accessType')
                result = obj.get_accessType();
            else
                if isKey(obj.props_, 'access_type')
                    result = obj.props_('access_type');
                else
                    result = [];
                end
            end
        end
        function obj = set.accessType(obj, value)
            obj.props_('access_type') = value;
        end
        function result = get.context(obj)
            if ismethod(obj, 'get_context')
                result = obj.get_context();
            else
                if isKey(obj.props_, 'context')
                    result = obj.props_('context');
                else
                    result = [];
                end
            end
        end
        function obj = set.context(obj, value)
            obj.props_('context') = value;
        end
        function result = get.origin(obj)
            if ismethod(obj, 'get_origin')
                result = obj.get_origin();
            else
                if isKey(obj.props_, 'origin')
                    result = obj.props_('origin');
                else
                    result = [];
                end
            end
        end
        function obj = set.origin(obj, value)
            obj.props_('origin') = value;
        end
        function result = get.requestMethod(obj)
            if ismethod(obj, 'get_requestMethod')
                result = obj.get_requestMethod();
            else
                if isKey(obj.props_, 'request_method')
                    result = obj.props_('request_method');
                else
                    result = [];
                end
            end
        end
        function obj = set.requestMethod(obj, value)
            obj.props_('request_method') = value;
        end
        function result = get.requestPath(obj)
            if ismethod(obj, 'get_requestPath')
                result = obj.get_requestPath();
            else
                if isKey(obj.props_, 'request_path')
                    result = obj.props_('request_path');
                else
                    result = [];
                end
            end
        end
        function obj = set.requestPath(obj, value)
            obj.props_('request_path') = value;
        end
        function result = get.timestamp(obj)
            if ismethod(obj, 'get_timestamp')
                result = obj.get_timestamp();
            else
                if isKey(obj.props_, 'timestamp')
                    result = obj.props_('timestamp');
                else
                    result = [];
                end
            end
        end
        function obj = set.timestamp(obj, value)
            obj.props_('timestamp') = value;
        end
        function result = toJson(obj)
            result = containers.Map;
            if isKey(obj.props_, '_id')
                result('_id') = flywheel.ModelBase.serializeValue(obj.props_('_id'), 'char');
            end
            if isKey(obj.props_, 'access_type')
                result('access_type') = flywheel.ModelBase.serializeValue(obj.props_('access_type'), 'char');
            end
            if isKey(obj.props_, 'context')
                result('context') = obj.props_('context').toJson();
            end
            if isKey(obj.props_, 'origin')
                result('origin') = obj.props_('origin').toJson();
            end
            if isKey(obj.props_, 'request_method')
                result('request_method') = flywheel.ModelBase.serializeValue(obj.props_('request_method'), 'char');
            end
            if isKey(obj.props_, 'request_path')
                result('request_path') = flywheel.ModelBase.serializeValue(obj.props_('request_path'), 'char');
            end
            if isKey(obj.props_, 'timestamp')
                result('timestamp') = flywheel.ModelBase.serializeValue(obj.props_('timestamp'), 'datetime');
            end
        end
        function result = struct(obj)
            result = struct;

            if isKey(obj.props_, '_id')
                result.id = obj.props_('_id');
            else
                result.id = [];
            end
            if isKey(obj.props_, 'access_type')
                result.accessType = obj.props_('access_type');
            else
                result.accessType = [];
            end
            if isKey(obj.props_, 'context')
                result.context = struct(obj.props_('context'));
            else
                result.context = [];
            end
            if isKey(obj.props_, 'origin')
                result.origin = struct(obj.props_('origin'));
            else
                result.origin = [];
            end
            if isKey(obj.props_, 'request_method')
                result.requestMethod = obj.props_('request_method');
            else
                result.requestMethod = [];
            end
            if isKey(obj.props_, 'request_path')
                result.requestPath = obj.props_('request_path');
            else
                result.requestPath = [];
            end
            if isKey(obj.props_, 'timestamp')
                result.timestamp = obj.props_('timestamp');
            else
                result.timestamp = [];
            end
        end
        function result = returnValue(obj)
            result = obj;
        end
    end
    methods(Access = protected)
        function prpgrp = getPropertyGroups(obj)
            if ~isscalar(obj)
                prpgrp = getPropertyGroups@matlab.mixin.CustomDisplay(obj);
            else
                propList = struct;
                if isKey(obj.props_, '_id')
                    propList.id = obj.props_('_id');
                else
                    propList.id = [];
                end
                if isKey(obj.props_, 'access_type')
                    propList.accessType = obj.props_('access_type');
                else
                    propList.accessType = [];
                end
                if isKey(obj.props_, 'context')
                    propList.context = obj.props_('context');
                else
                    propList.context = [];
                end
                if isKey(obj.props_, 'origin')
                    propList.origin = obj.props_('origin');
                else
                    propList.origin = [];
                end
                if isKey(obj.props_, 'request_method')
                    propList.requestMethod = obj.props_('request_method');
                else
                    propList.requestMethod = [];
                end
                if isKey(obj.props_, 'request_path')
                    propList.requestPath = obj.props_('request_path');
                else
                    propList.requestPath = [];
                end
                if isKey(obj.props_, 'timestamp')
                    propList.timestamp = obj.props_('timestamp');
                else
                    propList.timestamp = [];
                end
                prpgrp = matlab.mixin.util.PropertyGroup(propList);
            end
        end
    end
    methods(Static)
        function obj = fromJson(json, context)
            obj =  flywheel.model.ReportAccessLogEntry;
            if isfield(json, 'x0x5Fid')
                obj.props_('_id') = flywheel.ModelBase.deserializeValue(json.x0x5Fid, 'char');
            end
            if isfield(json, 'access_type')
                obj.props_('access_type') = flywheel.ModelBase.deserializeValue(json.access_type, 'char');
            end
            if isfield(json, 'context')
                obj.props_('context') = flywheel.model.ReportAccessLogContext.fromJson(json.context, context);
            end
            if isfield(json, 'origin')
                obj.props_('origin') = flywheel.model.ReportAccessLogOrigin.fromJson(json.origin, context);
            end
            if isfield(json, 'request_method')
                obj.props_('request_method') = flywheel.ModelBase.deserializeValue(json.request_method, 'char');
            end
            if isfield(json, 'request_path')
                obj.props_('request_path') = flywheel.ModelBase.deserializeValue(json.request_path, 'char');
            end
            if isfield(json, 'timestamp')
                obj.props_('timestamp') = flywheel.ModelBase.deserializeValue(json.timestamp, 'datetime');
            end
            if isprop(obj, 'context_')
                obj.setContext_(context);
            end
        end
        function obj = ensureIsInstance(obj)
            if ~isempty(obj)
                % Realistically, we only convert structs
                if ~isa(obj, 'flywheel.model.ReportAccessLogEntry')
                    obj = flywheel.model.ReportAccessLogEntry(obj);
                end
                if isKey(obj.props_, '_id')
                end
                if isKey(obj.props_, 'access_type')
                end
                if isKey(obj.props_, 'context')
                    obj.props_('context') =  flywheel.model.ReportAccessLogContext.ensureIsInstance(obj.props_('context'));
                end
                if isKey(obj.props_, 'origin')
                    obj.props_('origin') =  flywheel.model.ReportAccessLogOrigin.ensureIsInstance(obj.props_('origin'));
                end
                if isKey(obj.props_, 'request_method')
                end
                if isKey(obj.props_, 'request_path')
                end
                if isKey(obj.props_, 'timestamp')
                end
            end
        end
    end
end
