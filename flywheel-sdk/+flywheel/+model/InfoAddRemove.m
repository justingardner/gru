% InfoAddRemove - Indicates properties to update and a list of properties to remove
%
% InfoAddRemove Properties:
%    set     - Key/value pairs of properties to set
%    delete  - A list of properties to remove
%
% InfoAddRemove Methods:
%    toJson - Convert the object to a Map that can be encoded to json
%    struct - Convert the object to a struct
    classdef InfoAddRemove < flywheel.ModelBase
    % NOTE: This file is auto generated by the swagger code generator program.
    % Do not edit the file manually.
    properties (Constant)
        propertyMap = containers.Map({ 'set', 'delete' }, ...
            { 'set', 'delete' });
    end
    properties(Dependent)
        set
        delete
    end
    methods
        function obj = InfoAddRemove(varargin)
            obj@flywheel.ModelBase(flywheel.model.InfoAddRemove.propertyMap);

            % Allow empty object creation
            if length(varargin)
                p = inputParser;
                addParameter(p, 'set', []);
                addParameter(p, 'delete', []);

                parse(p, varargin{:});

                if ~isempty(p.Results.set)
                    obj.props_('set') = p.Results.set;
                end
                if ~isempty(p.Results.delete)
                    obj.props_('delete') = p.Results.delete;
                end
            end
        end
        function result = get.set(obj)
            if ismethod(obj, 'get_set')
                result = obj.get_set();
            else
                if isKey(obj.props_, 'set')
                    result = obj.props_('set');
                else
                    result = [];
                end
            end
        end
        function obj = set.set(obj, value)
            obj.props_('set') = value;
        end
        function result = get.delete(obj)
            if ismethod(obj, 'get_delete')
                result = obj.get_delete();
            else
                if isKey(obj.props_, 'delete')
                    result = obj.props_('delete');
                else
                    result = [];
                end
            end
        end
        function obj = set.delete(obj, value)
            obj.props_('delete') = value;
        end
        function result = toJson(obj)
            result = containers.Map;
            if isKey(obj.props_, 'set')
                result('set') = flywheel.ModelBase.serializeValue(obj.props_('set'), 'containers.Map');
            end
            if isKey(obj.props_, 'delete')
                result('delete') = flywheel.ModelBase.serializeValue(obj.props_('delete'), 'vector[char]');
            end
        end
        function result = struct(obj)
            result = struct;

            if isKey(obj.props_, 'set')
                result.set = obj.props_('set');
            else
                result.set = [];
            end
            if isKey(obj.props_, 'delete')
                result.delete = obj.props_('delete');
            else
                result.delete = [];
            end
        end
        function result = returnValue(obj)
            result = obj;
        end
    end
    methods(Access = protected)
        function prpgrp = getPropertyGroups(obj)
            if ~isscalar(obj)
                prpgrp = getPropertyGroups@matlab.mixin.CustomDisplay(obj);
            else
                propList = struct;
                if isKey(obj.props_, 'set')
                    propList.set = obj.props_('set');
                else
                    propList.set = [];
                end
                if isKey(obj.props_, 'delete')
                    propList.delete = obj.props_('delete');
                else
                    propList.delete = [];
                end
                prpgrp = matlab.mixin.util.PropertyGroup(propList);
            end
        end
    end
    methods(Static)
        function obj = fromJson(json, context)
            obj =  flywheel.model.InfoAddRemove;
            if isfield(json, 'set')
                obj.props_('set') = flywheel.ModelBase.deserializeValue(json.set, 'containers.Map');
            end
            if isfield(json, 'delete')
                obj.props_('delete') = flywheel.ModelBase.deserializeValue(json.delete, 'vector[char]');
            end
            if isprop(obj, 'context_')
                obj.setContext_(context);
            end
        end
        function obj = ensureIsInstance(obj)
            if ~isempty(obj)
                % Realistically, we only convert structs
                if ~isa(obj, 'flywheel.model.InfoAddRemove')
                    obj = flywheel.model.InfoAddRemove(obj);
                end
                if isKey(obj.props_, 'set')
                end
                if isKey(obj.props_, 'delete')
                end
            end
        end
    end
end
