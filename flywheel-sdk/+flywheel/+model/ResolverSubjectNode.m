% ResolverSubjectNode
%
% ResolverSubjectNode Properties:
%    id           - Unique database ID
%    project      - Unique database ID
%    firstname    - First name
%    lastname     - Last name
%    age          - Age at time of session, in seconds
%    sex         
%    cohort      
%    type        
%    race        
%    ethnicity   
%    species     
%    strain      
%    label        - A unique identifier for the subject
%    code         - A unique identifier for the subject
%    masterCode   - A unique identifier for the subject
%    tags         - Array of application-specific tags
%    info        
%    files       
%    parents     
%    created      - Creation time (automatically set)
%    modified     - Last modification time (automatically updated)
%    revision     - An incremental document revision number
%    permissions  - Array of user roles
%    notes       
%    infoExists   - Flag that indicates whether or not info exists on this container
%    analyses    
%
% ResolverSubjectNode Methods:
%    toJson - Convert the object to a Map that can be encoded to json
%    struct - Convert the object to a struct
    classdef ResolverSubjectNode < flywheel.ModelBase & flywheel.mixins.SubjectMixin
    % NOTE: This file is auto generated by the swagger code generator program.
    % Do not edit the file manually.
    properties (Constant)
        propertyMap = containers.Map({ 'id', 'project', 'firstname', 'lastname', 'age', 'sex', 'cohort', 'type', 'race', 'ethnicity', 'species', 'strain', 'label', 'code', 'masterCode', 'tags', 'info', 'files', 'parents', 'created', 'modified', 'revision', 'permissions', 'notes', 'infoExists', 'analyses' }, ...
            { '_id', 'project', 'firstname', 'lastname', 'age', 'sex', 'cohort', 'type', 'race', 'ethnicity', 'species', 'strain', 'label', 'code', 'master_code', 'tags', 'info', 'files', 'parents', 'created', 'modified', 'revision', 'permissions', 'notes', 'info_exists', 'analyses' });
    end
    properties(Dependent)
        id
        project
        firstname
        lastname
        age
        sex
        cohort
        type
        race
        ethnicity
        species
        strain
        label
        code
        masterCode
        tags
        info
        files
        parents
        created
        modified
        revision
        permissions
        notes
        infoExists
        analyses
    end
    methods
        function obj = ResolverSubjectNode(varargin)
            obj@flywheel.ModelBase(flywheel.model.ResolverSubjectNode.propertyMap);

            % Allow empty object creation
            if length(varargin)
                p = inputParser;
                addParameter(p, 'id', []);
                addParameter(p, 'project', []);
                addParameter(p, 'firstname', []);
                addParameter(p, 'lastname', []);
                addParameter(p, 'age', []);
                addParameter(p, 'sex', []);
                addParameter(p, 'cohort', []);
                addParameter(p, 'type', []);
                addParameter(p, 'race', []);
                addParameter(p, 'ethnicity', []);
                addParameter(p, 'species', []);
                addParameter(p, 'strain', []);
                addParameter(p, 'label', []);
                addParameter(p, 'code', []);
                addParameter(p, 'masterCode', []);
                addParameter(p, 'tags', []);
                addParameter(p, 'info', []);
                addParameter(p, 'files', []);
                addParameter(p, 'parents', []);
                addParameter(p, 'created', []);
                addParameter(p, 'modified', []);
                addParameter(p, 'revision', []);
                addParameter(p, 'permissions', []);
                addParameter(p, 'notes', []);
                addParameter(p, 'infoExists', []);
                addParameter(p, 'analyses', []);

                parse(p, varargin{:});

                if ~isempty(p.Results.id)
                    obj.props_('_id') = p.Results.id;
                end
                if ~isempty(p.Results.project)
                    obj.props_('project') = p.Results.project;
                end
                if ~isempty(p.Results.firstname)
                    obj.props_('firstname') = p.Results.firstname;
                end
                if ~isempty(p.Results.lastname)
                    obj.props_('lastname') = p.Results.lastname;
                end
                if ~isempty(p.Results.age)
                    obj.props_('age') = p.Results.age;
                end
                if ~isempty(p.Results.sex)
                    obj.props_('sex') = p.Results.sex;
                end
                if ~isempty(p.Results.cohort)
                    obj.props_('cohort') = p.Results.cohort;
                end
                if ~isempty(p.Results.type)
                    obj.props_('type') = p.Results.type;
                end
                if ~isempty(p.Results.race)
                    obj.props_('race') = p.Results.race;
                end
                if ~isempty(p.Results.ethnicity)
                    obj.props_('ethnicity') = p.Results.ethnicity;
                end
                if ~isempty(p.Results.species)
                    obj.props_('species') = p.Results.species;
                end
                if ~isempty(p.Results.strain)
                    obj.props_('strain') = p.Results.strain;
                end
                if ~isempty(p.Results.label)
                    obj.props_('label') = p.Results.label;
                end
                if ~isempty(p.Results.code)
                    obj.props_('code') = p.Results.code;
                end
                if ~isempty(p.Results.masterCode)
                    obj.props_('master_code') = p.Results.masterCode;
                end
                if ~isempty(p.Results.tags)
                    obj.props_('tags') = p.Results.tags;
                end
                if ~isempty(p.Results.info)
                    obj.props_('info') = p.Results.info;
                end
                if ~isempty(p.Results.files)
                    obj.props_('files') = p.Results.files;
                end
                if ~isempty(p.Results.parents)
                    obj.props_('parents') = p.Results.parents;
                end
                if ~isempty(p.Results.created)
                    obj.props_('created') = p.Results.created;
                end
                if ~isempty(p.Results.modified)
                    obj.props_('modified') = p.Results.modified;
                end
                if ~isempty(p.Results.revision)
                    obj.props_('revision') = p.Results.revision;
                end
                if ~isempty(p.Results.permissions)
                    obj.props_('permissions') = p.Results.permissions;
                end
                if ~isempty(p.Results.notes)
                    obj.props_('notes') = p.Results.notes;
                end
                if ~isempty(p.Results.infoExists)
                    obj.props_('info_exists') = p.Results.infoExists;
                end
                if ~isempty(p.Results.analyses)
                    obj.props_('analyses') = p.Results.analyses;
                end
            end
        end
        function result = get.id(obj)
            if ismethod(obj, 'get_id')
                result = obj.get_id();
            else
                if isKey(obj.props_, '_id')
                    result = obj.props_('_id');
                else
                    result = [];
                end
            end
        end
        function obj = set.id(obj, value)
            obj.props_('_id') = value;
        end
        function result = get.project(obj)
            if ismethod(obj, 'get_project')
                result = obj.get_project();
            else
                if isKey(obj.props_, 'project')
                    result = obj.props_('project');
                else
                    result = [];
                end
            end
        end
        function obj = set.project(obj, value)
            obj.props_('project') = value;
        end
        function result = get.firstname(obj)
            if ismethod(obj, 'get_firstname')
                result = obj.get_firstname();
            else
                if isKey(obj.props_, 'firstname')
                    result = obj.props_('firstname');
                else
                    result = [];
                end
            end
        end
        function obj = set.firstname(obj, value)
            obj.props_('firstname') = value;
        end
        function result = get.lastname(obj)
            if ismethod(obj, 'get_lastname')
                result = obj.get_lastname();
            else
                if isKey(obj.props_, 'lastname')
                    result = obj.props_('lastname');
                else
                    result = [];
                end
            end
        end
        function obj = set.lastname(obj, value)
            obj.props_('lastname') = value;
        end
        function result = get.age(obj)
            if ismethod(obj, 'get_age')
                result = obj.get_age();
            else
                if isKey(obj.props_, 'age')
                    result = obj.props_('age');
                else
                    result = [];
                end
            end
        end
        function obj = set.age(obj, value)
            obj.props_('age') = value;
        end
        function result = get.sex(obj)
            if ismethod(obj, 'get_sex')
                result = obj.get_sex();
            else
                if isKey(obj.props_, 'sex')
                    result = obj.props_('sex');
                else
                    result = [];
                end
            end
        end
        function obj = set.sex(obj, value)
            obj.props_('sex') = value;
        end
        function result = get.cohort(obj)
            if ismethod(obj, 'get_cohort')
                result = obj.get_cohort();
            else
                if isKey(obj.props_, 'cohort')
                    result = obj.props_('cohort');
                else
                    result = [];
                end
            end
        end
        function obj = set.cohort(obj, value)
            obj.props_('cohort') = value;
        end
        function result = get.type(obj)
            if ismethod(obj, 'get_type')
                result = obj.get_type();
            else
                if isKey(obj.props_, 'type')
                    result = obj.props_('type');
                else
                    result = [];
                end
            end
        end
        function obj = set.type(obj, value)
            obj.props_('type') = value;
        end
        function result = get.race(obj)
            if ismethod(obj, 'get_race')
                result = obj.get_race();
            else
                if isKey(obj.props_, 'race')
                    result = obj.props_('race');
                else
                    result = [];
                end
            end
        end
        function obj = set.race(obj, value)
            obj.props_('race') = value;
        end
        function result = get.ethnicity(obj)
            if ismethod(obj, 'get_ethnicity')
                result = obj.get_ethnicity();
            else
                if isKey(obj.props_, 'ethnicity')
                    result = obj.props_('ethnicity');
                else
                    result = [];
                end
            end
        end
        function obj = set.ethnicity(obj, value)
            obj.props_('ethnicity') = value;
        end
        function result = get.species(obj)
            if ismethod(obj, 'get_species')
                result = obj.get_species();
            else
                if isKey(obj.props_, 'species')
                    result = obj.props_('species');
                else
                    result = [];
                end
            end
        end
        function obj = set.species(obj, value)
            obj.props_('species') = value;
        end
        function result = get.strain(obj)
            if ismethod(obj, 'get_strain')
                result = obj.get_strain();
            else
                if isKey(obj.props_, 'strain')
                    result = obj.props_('strain');
                else
                    result = [];
                end
            end
        end
        function obj = set.strain(obj, value)
            obj.props_('strain') = value;
        end
        function result = get.label(obj)
            if ismethod(obj, 'get_label')
                result = obj.get_label();
            else
                if isKey(obj.props_, 'label')
                    result = obj.props_('label');
                else
                    result = [];
                end
            end
        end
        function obj = set.label(obj, value)
            obj.props_('label') = value;
        end
        function result = get.code(obj)
            if ismethod(obj, 'get_code')
                result = obj.get_code();
            else
                if isKey(obj.props_, 'code')
                    result = obj.props_('code');
                else
                    result = [];
                end
            end
        end
        function obj = set.code(obj, value)
            obj.props_('code') = value;
        end
        function result = get.masterCode(obj)
            if ismethod(obj, 'get_masterCode')
                result = obj.get_masterCode();
            else
                if isKey(obj.props_, 'master_code')
                    result = obj.props_('master_code');
                else
                    result = [];
                end
            end
        end
        function obj = set.masterCode(obj, value)
            obj.props_('master_code') = value;
        end
        function result = get.tags(obj)
            if ismethod(obj, 'get_tags')
                result = obj.get_tags();
            else
                if isKey(obj.props_, 'tags')
                    result = obj.props_('tags');
                else
                    result = [];
                end
            end
        end
        function obj = set.tags(obj, value)
            obj.props_('tags') = value;
        end
        function result = get.info(obj)
            if ismethod(obj, 'get_info')
                result = obj.get_info();
            else
                if isKey(obj.props_, 'info')
                    result = obj.props_('info');
                else
                    result = [];
                end
            end
        end
        function obj = set.info(obj, value)
            obj.props_('info') = value;
        end
        function result = get.files(obj)
            if ismethod(obj, 'get_files')
                result = obj.get_files();
            else
                if isKey(obj.props_, 'files')
                    result = obj.props_('files');
                else
                    result = [];
                end
            end
        end
        function obj = set.files(obj, value)
            obj.props_('files') = value;
        end
        function result = get.parents(obj)
            if ismethod(obj, 'get_parents')
                result = obj.get_parents();
            else
                if isKey(obj.props_, 'parents')
                    result = obj.props_('parents');
                else
                    result = [];
                end
            end
        end
        function obj = set.parents(obj, value)
            obj.props_('parents') = value;
        end
        function result = get.created(obj)
            if ismethod(obj, 'get_created')
                result = obj.get_created();
            else
                if isKey(obj.props_, 'created')
                    result = obj.props_('created');
                else
                    result = [];
                end
            end
        end
        function obj = set.created(obj, value)
            obj.props_('created') = value;
        end
        function result = get.modified(obj)
            if ismethod(obj, 'get_modified')
                result = obj.get_modified();
            else
                if isKey(obj.props_, 'modified')
                    result = obj.props_('modified');
                else
                    result = [];
                end
            end
        end
        function obj = set.modified(obj, value)
            obj.props_('modified') = value;
        end
        function result = get.revision(obj)
            if ismethod(obj, 'get_revision')
                result = obj.get_revision();
            else
                if isKey(obj.props_, 'revision')
                    result = obj.props_('revision');
                else
                    result = [];
                end
            end
        end
        function obj = set.revision(obj, value)
            obj.props_('revision') = value;
        end
        function result = get.permissions(obj)
            if ismethod(obj, 'get_permissions')
                result = obj.get_permissions();
            else
                if isKey(obj.props_, 'permissions')
                    result = obj.props_('permissions');
                else
                    result = [];
                end
            end
        end
        function obj = set.permissions(obj, value)
            obj.props_('permissions') = value;
        end
        function result = get.notes(obj)
            if ismethod(obj, 'get_notes')
                result = obj.get_notes();
            else
                if isKey(obj.props_, 'notes')
                    result = obj.props_('notes');
                else
                    result = [];
                end
            end
        end
        function obj = set.notes(obj, value)
            obj.props_('notes') = value;
        end
        function result = get.infoExists(obj)
            if ismethod(obj, 'get_infoExists')
                result = obj.get_infoExists();
            else
                if isKey(obj.props_, 'info_exists')
                    result = obj.props_('info_exists');
                else
                    result = [];
                end
            end
        end
        function obj = set.infoExists(obj, value)
            obj.props_('info_exists') = value;
        end
        function result = get.analyses(obj)
            if ismethod(obj, 'get_analyses')
                result = obj.get_analyses();
            else
                if isKey(obj.props_, 'analyses')
                    result = obj.props_('analyses');
                else
                    result = [];
                end
            end
        end
        function obj = set.analyses(obj, value)
            obj.props_('analyses') = value;
        end
        function result = toJson(obj)
            result = containers.Map;
            if isKey(obj.props_, '_id')
                result('_id') = flywheel.ModelBase.serializeValue(obj.props_('_id'), 'char');
            end
            if isKey(obj.props_, 'project')
                result('project') = flywheel.ModelBase.serializeValue(obj.props_('project'), 'char');
            end
            if isKey(obj.props_, 'firstname')
                result('firstname') = flywheel.ModelBase.serializeValue(obj.props_('firstname'), 'char');
            end
            if isKey(obj.props_, 'lastname')
                result('lastname') = flywheel.ModelBase.serializeValue(obj.props_('lastname'), 'char');
            end
            if isKey(obj.props_, 'age')
                result('age') = flywheel.ModelBase.serializeValue(obj.props_('age'), 'integer');
            end
            if isKey(obj.props_, 'sex')
                result('sex') = flywheel.ModelBase.serializeValue(obj.props_('sex'), 'char');
            end
            if isKey(obj.props_, 'cohort')
                result('cohort') = flywheel.ModelBase.serializeValue(obj.props_('cohort'), 'char');
            end
            if isKey(obj.props_, 'type')
                result('type') = flywheel.ModelBase.serializeValue(obj.props_('type'), 'char');
            end
            if isKey(obj.props_, 'race')
                result('race') = flywheel.ModelBase.serializeValue(obj.props_('race'), 'char');
            end
            if isKey(obj.props_, 'ethnicity')
                result('ethnicity') = flywheel.ModelBase.serializeValue(obj.props_('ethnicity'), 'char');
            end
            if isKey(obj.props_, 'species')
                result('species') = flywheel.ModelBase.serializeValue(obj.props_('species'), 'char');
            end
            if isKey(obj.props_, 'strain')
                result('strain') = flywheel.ModelBase.serializeValue(obj.props_('strain'), 'char');
            end
            if isKey(obj.props_, 'label')
                result('label') = flywheel.ModelBase.serializeValue(obj.props_('label'), 'char');
            end
            if isKey(obj.props_, 'code')
                result('code') = flywheel.ModelBase.serializeValue(obj.props_('code'), 'char');
            end
            if isKey(obj.props_, 'master_code')
                result('master_code') = flywheel.ModelBase.serializeValue(obj.props_('master_code'), 'char');
            end
            if isKey(obj.props_, 'tags')
                result('tags') = flywheel.ModelBase.serializeValue(obj.props_('tags'), 'vector[char]');
            end
            if isKey(obj.props_, 'info')
                result('info') = obj.props_('info').toJson();
            end
            if isKey(obj.props_, 'files')
                result('files') = flywheel.ModelBase.cellmap(@toJson, obj.props_('files'));
            end
            if isKey(obj.props_, 'parents')
                result('parents') = obj.props_('parents').toJson();
            end
            if isKey(obj.props_, 'created')
                result('created') = flywheel.ModelBase.serializeValue(obj.props_('created'), 'datetime');
            end
            if isKey(obj.props_, 'modified')
                result('modified') = flywheel.ModelBase.serializeValue(obj.props_('modified'), 'datetime');
            end
            if isKey(obj.props_, 'revision')
                result('revision') = flywheel.ModelBase.serializeValue(obj.props_('revision'), 'integer');
            end
            if isKey(obj.props_, 'permissions')
                result('permissions') = flywheel.ModelBase.cellmap(@toJson, obj.props_('permissions'));
            end
            if isKey(obj.props_, 'notes')
                result('notes') = flywheel.ModelBase.cellmap(@toJson, obj.props_('notes'));
            end
            if isKey(obj.props_, 'info_exists')
                result('info_exists') = flywheel.ModelBase.serializeValue(obj.props_('info_exists'), 'logical');
            end
            if isKey(obj.props_, 'analyses')
                result('analyses') = flywheel.ModelBase.cellmap(@toJson, obj.props_('analyses'));
            end
        end
        function result = struct(obj)
            result = struct;

            if isKey(obj.props_, '_id')
                result.id = obj.props_('_id');
            else
                result.id = [];
            end
            if isKey(obj.props_, 'project')
                result.project = obj.props_('project');
            else
                result.project = [];
            end
            if isKey(obj.props_, 'firstname')
                result.firstname = obj.props_('firstname');
            else
                result.firstname = [];
            end
            if isKey(obj.props_, 'lastname')
                result.lastname = obj.props_('lastname');
            else
                result.lastname = [];
            end
            if isKey(obj.props_, 'age')
                result.age = obj.props_('age');
            else
                result.age = [];
            end
            if isKey(obj.props_, 'sex')
                result.sex = obj.props_('sex');
            else
                result.sex = [];
            end
            if isKey(obj.props_, 'cohort')
                result.cohort = obj.props_('cohort');
            else
                result.cohort = [];
            end
            if isKey(obj.props_, 'type')
                result.type = obj.props_('type');
            else
                result.type = [];
            end
            if isKey(obj.props_, 'race')
                result.race = obj.props_('race');
            else
                result.race = [];
            end
            if isKey(obj.props_, 'ethnicity')
                result.ethnicity = obj.props_('ethnicity');
            else
                result.ethnicity = [];
            end
            if isKey(obj.props_, 'species')
                result.species = obj.props_('species');
            else
                result.species = [];
            end
            if isKey(obj.props_, 'strain')
                result.strain = obj.props_('strain');
            else
                result.strain = [];
            end
            if isKey(obj.props_, 'label')
                result.label = obj.props_('label');
            else
                result.label = [];
            end
            if isKey(obj.props_, 'code')
                result.code = obj.props_('code');
            else
                result.code = [];
            end
            if isKey(obj.props_, 'master_code')
                result.masterCode = obj.props_('master_code');
            else
                result.masterCode = [];
            end
            if isKey(obj.props_, 'tags')
                result.tags = obj.props_('tags');
            else
                result.tags = [];
            end
            if isKey(obj.props_, 'info')
                result.info = struct(obj.props_('info'));
            else
                result.info = [];
            end
            if isKey(obj.props_, 'files')
                result.files = flywheel.ModelBase.cellmap(@struct, obj.props_('files'));
            else
                result.files = [];
            end
            if isKey(obj.props_, 'parents')
                result.parents = struct(obj.props_('parents'));
            else
                result.parents = [];
            end
            if isKey(obj.props_, 'created')
                result.created = obj.props_('created');
            else
                result.created = [];
            end
            if isKey(obj.props_, 'modified')
                result.modified = obj.props_('modified');
            else
                result.modified = [];
            end
            if isKey(obj.props_, 'revision')
                result.revision = obj.props_('revision');
            else
                result.revision = [];
            end
            if isKey(obj.props_, 'permissions')
                result.permissions = flywheel.ModelBase.cellmap(@struct, obj.props_('permissions'));
            else
                result.permissions = [];
            end
            if isKey(obj.props_, 'notes')
                result.notes = flywheel.ModelBase.cellmap(@struct, obj.props_('notes'));
            else
                result.notes = [];
            end
            if isKey(obj.props_, 'info_exists')
                result.infoExists = obj.props_('info_exists');
            else
                result.infoExists = [];
            end
            if isKey(obj.props_, 'analyses')
                result.analyses = flywheel.ModelBase.cellmap(@struct, obj.props_('analyses'));
            else
                result.analyses = [];
            end
        end
        function result = returnValue(obj)
            result = obj;
        end
    end
    methods(Access = protected)
        function prpgrp = getPropertyGroups(obj)
            if ~isscalar(obj)
                prpgrp = getPropertyGroups@matlab.mixin.CustomDisplay(obj);
            else
                propList = struct;
                if isKey(obj.props_, '_id')
                    propList.id = obj.props_('_id');
                else
                    propList.id = [];
                end
                if isKey(obj.props_, 'project')
                    propList.project = obj.props_('project');
                else
                    propList.project = [];
                end
                if isKey(obj.props_, 'firstname')
                    propList.firstname = obj.props_('firstname');
                else
                    propList.firstname = [];
                end
                if isKey(obj.props_, 'lastname')
                    propList.lastname = obj.props_('lastname');
                else
                    propList.lastname = [];
                end
                if isKey(obj.props_, 'age')
                    propList.age = obj.props_('age');
                else
                    propList.age = [];
                end
                if isKey(obj.props_, 'sex')
                    propList.sex = obj.props_('sex');
                else
                    propList.sex = [];
                end
                if isKey(obj.props_, 'cohort')
                    propList.cohort = obj.props_('cohort');
                else
                    propList.cohort = [];
                end
                if isKey(obj.props_, 'type')
                    propList.type = obj.props_('type');
                else
                    propList.type = [];
                end
                if isKey(obj.props_, 'race')
                    propList.race = obj.props_('race');
                else
                    propList.race = [];
                end
                if isKey(obj.props_, 'ethnicity')
                    propList.ethnicity = obj.props_('ethnicity');
                else
                    propList.ethnicity = [];
                end
                if isKey(obj.props_, 'species')
                    propList.species = obj.props_('species');
                else
                    propList.species = [];
                end
                if isKey(obj.props_, 'strain')
                    propList.strain = obj.props_('strain');
                else
                    propList.strain = [];
                end
                if isKey(obj.props_, 'label')
                    propList.label = obj.props_('label');
                else
                    propList.label = [];
                end
                if isKey(obj.props_, 'code')
                    propList.code = obj.props_('code');
                else
                    propList.code = [];
                end
                if isKey(obj.props_, 'master_code')
                    propList.masterCode = obj.props_('master_code');
                else
                    propList.masterCode = [];
                end
                if isKey(obj.props_, 'tags')
                    propList.tags = obj.props_('tags');
                else
                    propList.tags = [];
                end
                if isKey(obj.props_, 'info')
                    propList.info = obj.props_('info');
                else
                    propList.info = [];
                end
                if isKey(obj.props_, 'files')
                    propList.files = obj.props_('files');
                else
                    propList.files = [];
                end
                if isKey(obj.props_, 'parents')
                    propList.parents = obj.props_('parents');
                else
                    propList.parents = [];
                end
                if isKey(obj.props_, 'created')
                    propList.created = obj.props_('created');
                else
                    propList.created = [];
                end
                if isKey(obj.props_, 'modified')
                    propList.modified = obj.props_('modified');
                else
                    propList.modified = [];
                end
                if isKey(obj.props_, 'revision')
                    propList.revision = obj.props_('revision');
                else
                    propList.revision = [];
                end
                if isKey(obj.props_, 'permissions')
                    propList.permissions = obj.props_('permissions');
                else
                    propList.permissions = [];
                end
                if isKey(obj.props_, 'notes')
                    propList.notes = obj.props_('notes');
                else
                    propList.notes = [];
                end
                if isKey(obj.props_, 'info_exists')
                    propList.infoExists = obj.props_('info_exists');
                else
                    propList.infoExists = [];
                end
                if isKey(obj.props_, 'analyses')
                    propList.analyses = obj.props_('analyses');
                else
                    propList.analyses = [];
                end
                prpgrp = matlab.mixin.util.PropertyGroup(propList);
            end
        end
    end
    methods(Static)
        function obj = fromJson(json, context)
            obj =  flywheel.model.ResolverSubjectNode;
            if isfield(json, 'x0x5Fid')
                obj.props_('_id') = flywheel.ModelBase.deserializeValue(json.x0x5Fid, 'char');
            end
            if isfield(json, 'project')
                obj.props_('project') = flywheel.ModelBase.deserializeValue(json.project, 'char');
            end
            if isfield(json, 'firstname')
                obj.props_('firstname') = flywheel.ModelBase.deserializeValue(json.firstname, 'char');
            end
            if isfield(json, 'lastname')
                obj.props_('lastname') = flywheel.ModelBase.deserializeValue(json.lastname, 'char');
            end
            if isfield(json, 'age')
                obj.props_('age') = flywheel.ModelBase.deserializeValue(json.age, 'integer');
            end
            if isfield(json, 'sex')
                obj.props_('sex') = flywheel.ModelBase.deserializeValue(json.sex, 'char');
            end
            if isfield(json, 'cohort')
                obj.props_('cohort') = flywheel.ModelBase.deserializeValue(json.cohort, 'char');
            end
            if isfield(json, 'type')
                obj.props_('type') = flywheel.ModelBase.deserializeValue(json.type, 'char');
            end
            if isfield(json, 'race')
                obj.props_('race') = flywheel.ModelBase.deserializeValue(json.race, 'char');
            end
            if isfield(json, 'ethnicity')
                obj.props_('ethnicity') = flywheel.ModelBase.deserializeValue(json.ethnicity, 'char');
            end
            if isfield(json, 'species')
                obj.props_('species') = flywheel.ModelBase.deserializeValue(json.species, 'char');
            end
            if isfield(json, 'strain')
                obj.props_('strain') = flywheel.ModelBase.deserializeValue(json.strain, 'char');
            end
            if isfield(json, 'label')
                obj.props_('label') = flywheel.ModelBase.deserializeValue(json.label, 'char');
            end
            if isfield(json, 'code')
                obj.props_('code') = flywheel.ModelBase.deserializeValue(json.code, 'char');
            end
            if isfield(json, 'master_code')
                obj.props_('master_code') = flywheel.ModelBase.deserializeValue(json.master_code, 'char');
            end
            if isfield(json, 'tags')
                obj.props_('tags') = flywheel.ModelBase.deserializeValue(json.tags, 'vector[char]');
            end
            if isfield(json, 'info')
                obj.props_('info') = flywheel.model.CommonInfo.fromJson(json.info, context);
            end
            if isfield(json, 'files')
                obj.props_('files') = flywheel.ModelBase.cellmap(@(x) flywheel.model.FileEntry.fromJson(x, context), json.files);
            end
            if isfield(json, 'parents')
                obj.props_('parents') = flywheel.model.ContainerParents.fromJson(json.parents, context);
            end
            if isfield(json, 'created')
                obj.props_('created') = flywheel.ModelBase.deserializeValue(json.created, 'datetime');
            end
            if isfield(json, 'modified')
                obj.props_('modified') = flywheel.ModelBase.deserializeValue(json.modified, 'datetime');
            end
            if isfield(json, 'revision')
                obj.props_('revision') = flywheel.ModelBase.deserializeValue(json.revision, 'integer');
            end
            if isfield(json, 'permissions')
                obj.props_('permissions') = flywheel.ModelBase.cellmap(@(x) flywheel.model.Permission.fromJson(x, context), json.permissions);
            end
            if isfield(json, 'notes')
                obj.props_('notes') = flywheel.ModelBase.cellmap(@(x) flywheel.model.Note.fromJson(x, context), json.notes);
            end
            if isfield(json, 'info_exists')
                obj.props_('info_exists') = flywheel.ModelBase.deserializeValue(json.info_exists, 'logical');
            end
            if isfield(json, 'analyses')
                obj.props_('analyses') = flywheel.ModelBase.cellmap(@(x) flywheel.model.AnalysisOutput.fromJson(x, context), json.analyses);
            end
            if isprop(obj, 'context_')
                obj.setContext_(context);
            end
        end
        function obj = ensureIsInstance(obj)
            if ~isempty(obj)
                % Realistically, we only convert structs
                if ~isa(obj, 'flywheel.model.ResolverSubjectNode')
                    obj = flywheel.model.ResolverSubjectNode(obj);
                end
                if isKey(obj.props_, '_id')
                end
                if isKey(obj.props_, 'project')
                end
                if isKey(obj.props_, 'firstname')
                end
                if isKey(obj.props_, 'lastname')
                end
                if isKey(obj.props_, 'age')
                end
                if isKey(obj.props_, 'sex')
                end
                if isKey(obj.props_, 'cohort')
                end
                if isKey(obj.props_, 'type')
                end
                if isKey(obj.props_, 'race')
                end
                if isKey(obj.props_, 'ethnicity')
                end
                if isKey(obj.props_, 'species')
                end
                if isKey(obj.props_, 'strain')
                end
                if isKey(obj.props_, 'label')
                end
                if isKey(obj.props_, 'code')
                end
                if isKey(obj.props_, 'master_code')
                end
                if isKey(obj.props_, 'tags')
                end
                if isKey(obj.props_, 'info')
                    obj.props_('info') =  flywheel.model.CommonInfo.ensureIsInstance(obj.props_('info'));
                end
                if isKey(obj.props_, 'files')
                    obj.props_('files') = flywheel.ModelBase.cellmap(@flywheel.model.FileEntry.ensureIsInstance, obj.props_('files'));
                end
                if isKey(obj.props_, 'parents')
                    obj.props_('parents') =  flywheel.model.ContainerParents.ensureIsInstance(obj.props_('parents'));
                end
                if isKey(obj.props_, 'created')
                end
                if isKey(obj.props_, 'modified')
                end
                if isKey(obj.props_, 'revision')
                end
                if isKey(obj.props_, 'permissions')
                    obj.props_('permissions') = flywheel.ModelBase.cellmap(@flywheel.model.Permission.ensureIsInstance, obj.props_('permissions'));
                end
                if isKey(obj.props_, 'notes')
                    obj.props_('notes') = flywheel.ModelBase.cellmap(@flywheel.model.Note.ensureIsInstance, obj.props_('notes'));
                end
                if isKey(obj.props_, 'info_exists')
                end
                if isKey(obj.props_, 'analyses')
                    obj.props_('analyses') = flywheel.ModelBase.cellmap(@flywheel.model.AnalysisOutput.ensureIsInstance, obj.props_('analyses'));
                end
            end
        end
    end
end
