% AcquisitionMetadataInput
%
% AcquisitionMetadataInput Properties:
%    label       
%    info        
%    metadata    
%    measurement 
%    instrument  
%    uid         
%    tags         - Array of application-specific tags
%    timestamp   
%    timezone    
%    files       
%
% AcquisitionMetadataInput Methods:
%    toJson - Convert the object to a Map that can be encoded to json
%    struct - Convert the object to a struct
    classdef AcquisitionMetadataInput < flywheel.ModelBase
    % NOTE: This file is auto generated by the swagger code generator program.
    % Do not edit the file manually.
    properties (Constant)
        propertyMap = containers.Map({ 'label', 'info', 'metadata', 'measurement', 'instrument', 'uid', 'tags', 'timestamp', 'timezone', 'files' }, ...
            { 'label', 'info', 'metadata', 'measurement', 'instrument', 'uid', 'tags', 'timestamp', 'timezone', 'files' });
    end
    properties(Dependent)
        label
        info
        metadata
        measurement
        instrument
        uid
        tags
        timestamp
        timezone
        files
    end
    methods
        function obj = AcquisitionMetadataInput(varargin)
            obj@flywheel.ModelBase(flywheel.model.AcquisitionMetadataInput.propertyMap);

            % Allow empty object creation
            if length(varargin)
                p = inputParser;
                addParameter(p, 'label', []);
                addParameter(p, 'info', []);
                addParameter(p, 'metadata', []);
                addParameter(p, 'measurement', []);
                addParameter(p, 'instrument', []);
                addParameter(p, 'uid', []);
                addParameter(p, 'tags', []);
                addParameter(p, 'timestamp', []);
                addParameter(p, 'timezone', []);
                addParameter(p, 'files', []);

                parse(p, varargin{:});

                if ~isempty(p.Results.label)
                    obj.props_('label') = p.Results.label;
                end
                if ~isempty(p.Results.info)
                    obj.props_('info') = p.Results.info;
                end
                if ~isempty(p.Results.metadata)
                    obj.props_('metadata') = p.Results.metadata;
                end
                if ~isempty(p.Results.measurement)
                    obj.props_('measurement') = p.Results.measurement;
                end
                if ~isempty(p.Results.instrument)
                    obj.props_('instrument') = p.Results.instrument;
                end
                if ~isempty(p.Results.uid)
                    obj.props_('uid') = p.Results.uid;
                end
                if ~isempty(p.Results.tags)
                    obj.props_('tags') = p.Results.tags;
                end
                if ~isempty(p.Results.timestamp)
                    obj.props_('timestamp') = p.Results.timestamp;
                end
                if ~isempty(p.Results.timezone)
                    obj.props_('timezone') = p.Results.timezone;
                end
                if ~isempty(p.Results.files)
                    obj.props_('files') = p.Results.files;
                end
            end
        end
        function result = get.label(obj)
            if ismethod(obj, 'get_label')
                result = obj.get_label();
            else
                if isKey(obj.props_, 'label')
                    result = obj.props_('label');
                else
                    result = [];
                end
            end
        end
        function obj = set.label(obj, value)
            obj.props_('label') = value;
        end
        function result = get.info(obj)
            if ismethod(obj, 'get_info')
                result = obj.get_info();
            else
                if isKey(obj.props_, 'info')
                    result = obj.props_('info');
                else
                    result = [];
                end
            end
        end
        function obj = set.info(obj, value)
            obj.props_('info') = value;
        end
        function result = get.metadata(obj)
            if ismethod(obj, 'get_metadata')
                result = obj.get_metadata();
            else
                if isKey(obj.props_, 'metadata')
                    result = obj.props_('metadata');
                else
                    result = [];
                end
            end
        end
        function obj = set.metadata(obj, value)
            obj.props_('metadata') = value;
        end
        function result = get.measurement(obj)
            if ismethod(obj, 'get_measurement')
                result = obj.get_measurement();
            else
                if isKey(obj.props_, 'measurement')
                    result = obj.props_('measurement');
                else
                    result = [];
                end
            end
        end
        function obj = set.measurement(obj, value)
            obj.props_('measurement') = value;
        end
        function result = get.instrument(obj)
            if ismethod(obj, 'get_instrument')
                result = obj.get_instrument();
            else
                if isKey(obj.props_, 'instrument')
                    result = obj.props_('instrument');
                else
                    result = [];
                end
            end
        end
        function obj = set.instrument(obj, value)
            obj.props_('instrument') = value;
        end
        function result = get.uid(obj)
            if ismethod(obj, 'get_uid')
                result = obj.get_uid();
            else
                if isKey(obj.props_, 'uid')
                    result = obj.props_('uid');
                else
                    result = [];
                end
            end
        end
        function obj = set.uid(obj, value)
            obj.props_('uid') = value;
        end
        function result = get.tags(obj)
            if ismethod(obj, 'get_tags')
                result = obj.get_tags();
            else
                if isKey(obj.props_, 'tags')
                    result = obj.props_('tags');
                else
                    result = [];
                end
            end
        end
        function obj = set.tags(obj, value)
            obj.props_('tags') = value;
        end
        function result = get.timestamp(obj)
            if ismethod(obj, 'get_timestamp')
                result = obj.get_timestamp();
            else
                if isKey(obj.props_, 'timestamp')
                    result = obj.props_('timestamp');
                else
                    result = [];
                end
            end
        end
        function obj = set.timestamp(obj, value)
            obj.props_('timestamp') = value;
        end
        function result = get.timezone(obj)
            if ismethod(obj, 'get_timezone')
                result = obj.get_timezone();
            else
                if isKey(obj.props_, 'timezone')
                    result = obj.props_('timezone');
                else
                    result = [];
                end
            end
        end
        function obj = set.timezone(obj, value)
            obj.props_('timezone') = value;
        end
        function result = get.files(obj)
            if ismethod(obj, 'get_files')
                result = obj.get_files();
            else
                if isKey(obj.props_, 'files')
                    result = obj.props_('files');
                else
                    result = [];
                end
            end
        end
        function obj = set.files(obj, value)
            obj.props_('files') = value;
        end
        function result = toJson(obj)
            result = containers.Map;
            if isKey(obj.props_, 'label')
                result('label') = flywheel.ModelBase.serializeValue(obj.props_('label'), 'char');
            end
            if isKey(obj.props_, 'info')
                result('info') = flywheel.ModelBase.serializeValue(obj.props_('info'), 'containers.Map');
            end
            if isKey(obj.props_, 'metadata')
                result('metadata') = flywheel.ModelBase.serializeValue(obj.props_('metadata'), 'containers.Map');
            end
            if isKey(obj.props_, 'measurement')
                result('measurement') = flywheel.ModelBase.serializeValue(obj.props_('measurement'), 'char');
            end
            if isKey(obj.props_, 'instrument')
                result('instrument') = flywheel.ModelBase.serializeValue(obj.props_('instrument'), 'char');
            end
            if isKey(obj.props_, 'uid')
                result('uid') = flywheel.ModelBase.serializeValue(obj.props_('uid'), 'char');
            end
            if isKey(obj.props_, 'tags')
                result('tags') = flywheel.ModelBase.serializeValue(obj.props_('tags'), 'vector[char]');
            end
            if isKey(obj.props_, 'timestamp')
                result('timestamp') = flywheel.ModelBase.serializeValue(obj.props_('timestamp'), 'datetime');
            end
            if isKey(obj.props_, 'timezone')
                result('timezone') = flywheel.ModelBase.serializeValue(obj.props_('timezone'), 'char');
            end
            if isKey(obj.props_, 'files')
                result('files') = flywheel.ModelBase.cellmap(@toJson, obj.props_('files'));
            end
        end
        function result = struct(obj)
            result = struct;

            if isKey(obj.props_, 'label')
                result.label = obj.props_('label');
            else
                result.label = [];
            end
            if isKey(obj.props_, 'info')
                result.info = obj.props_('info');
            else
                result.info = [];
            end
            if isKey(obj.props_, 'metadata')
                result.metadata = obj.props_('metadata');
            else
                result.metadata = [];
            end
            if isKey(obj.props_, 'measurement')
                result.measurement = obj.props_('measurement');
            else
                result.measurement = [];
            end
            if isKey(obj.props_, 'instrument')
                result.instrument = obj.props_('instrument');
            else
                result.instrument = [];
            end
            if isKey(obj.props_, 'uid')
                result.uid = obj.props_('uid');
            else
                result.uid = [];
            end
            if isKey(obj.props_, 'tags')
                result.tags = obj.props_('tags');
            else
                result.tags = [];
            end
            if isKey(obj.props_, 'timestamp')
                result.timestamp = obj.props_('timestamp');
            else
                result.timestamp = [];
            end
            if isKey(obj.props_, 'timezone')
                result.timezone = obj.props_('timezone');
            else
                result.timezone = [];
            end
            if isKey(obj.props_, 'files')
                result.files = flywheel.ModelBase.cellmap(@struct, obj.props_('files'));
            else
                result.files = [];
            end
        end
        function result = returnValue(obj)
            result = obj;
        end
    end
    methods(Access = protected)
        function prpgrp = getPropertyGroups(obj)
            if ~isscalar(obj)
                prpgrp = getPropertyGroups@matlab.mixin.CustomDisplay(obj);
            else
                propList = struct;
                if isKey(obj.props_, 'label')
                    propList.label = obj.props_('label');
                else
                    propList.label = [];
                end
                if isKey(obj.props_, 'info')
                    propList.info = obj.props_('info');
                else
                    propList.info = [];
                end
                if isKey(obj.props_, 'metadata')
                    propList.metadata = obj.props_('metadata');
                else
                    propList.metadata = [];
                end
                if isKey(obj.props_, 'measurement')
                    propList.measurement = obj.props_('measurement');
                else
                    propList.measurement = [];
                end
                if isKey(obj.props_, 'instrument')
                    propList.instrument = obj.props_('instrument');
                else
                    propList.instrument = [];
                end
                if isKey(obj.props_, 'uid')
                    propList.uid = obj.props_('uid');
                else
                    propList.uid = [];
                end
                if isKey(obj.props_, 'tags')
                    propList.tags = obj.props_('tags');
                else
                    propList.tags = [];
                end
                if isKey(obj.props_, 'timestamp')
                    propList.timestamp = obj.props_('timestamp');
                else
                    propList.timestamp = [];
                end
                if isKey(obj.props_, 'timezone')
                    propList.timezone = obj.props_('timezone');
                else
                    propList.timezone = [];
                end
                if isKey(obj.props_, 'files')
                    propList.files = obj.props_('files');
                else
                    propList.files = [];
                end
                prpgrp = matlab.mixin.util.PropertyGroup(propList);
            end
        end
    end
    methods(Static)
        function obj = fromJson(json, context)
            obj =  flywheel.model.AcquisitionMetadataInput;
            if isfield(json, 'label')
                obj.props_('label') = flywheel.ModelBase.deserializeValue(json.label, 'char');
            end
            if isfield(json, 'info')
                obj.props_('info') = flywheel.ModelBase.deserializeValue(json.info, 'containers.Map');
            end
            if isfield(json, 'metadata')
                obj.props_('metadata') = flywheel.ModelBase.deserializeValue(json.metadata, 'containers.Map');
            end
            if isfield(json, 'measurement')
                obj.props_('measurement') = flywheel.ModelBase.deserializeValue(json.measurement, 'char');
            end
            if isfield(json, 'instrument')
                obj.props_('instrument') = flywheel.ModelBase.deserializeValue(json.instrument, 'char');
            end
            if isfield(json, 'uid')
                obj.props_('uid') = flywheel.ModelBase.deserializeValue(json.uid, 'char');
            end
            if isfield(json, 'tags')
                obj.props_('tags') = flywheel.ModelBase.deserializeValue(json.tags, 'vector[char]');
            end
            if isfield(json, 'timestamp')
                obj.props_('timestamp') = flywheel.ModelBase.deserializeValue(json.timestamp, 'datetime');
            end
            if isfield(json, 'timezone')
                obj.props_('timezone') = flywheel.ModelBase.deserializeValue(json.timezone, 'char');
            end
            if isfield(json, 'files')
                obj.props_('files') = flywheel.ModelBase.cellmap(@(x) flywheel.model.FileEntry.fromJson(x, context), json.files);
            end
            if isprop(obj, 'context_')
                obj.setContext_(context);
            end
        end
        function obj = ensureIsInstance(obj)
            if ~isempty(obj)
                % Realistically, we only convert structs
                if ~isa(obj, 'flywheel.model.AcquisitionMetadataInput')
                    obj = flywheel.model.AcquisitionMetadataInput(obj);
                end
                if isKey(obj.props_, 'label')
                end
                if isKey(obj.props_, 'info')
                end
                if isKey(obj.props_, 'metadata')
                end
                if isKey(obj.props_, 'measurement')
                end
                if isKey(obj.props_, 'instrument')
                end
                if isKey(obj.props_, 'uid')
                end
                if isKey(obj.props_, 'tags')
                end
                if isKey(obj.props_, 'timestamp')
                end
                if isKey(obj.props_, 'timezone')
                end
                if isKey(obj.props_, 'files')
                    obj.props_('files') = flywheel.ModelBase.cellmap(@flywheel.model.FileEntry.ensureIsInstance, obj.props_('files'));
                end
            end
        end
    end
end
