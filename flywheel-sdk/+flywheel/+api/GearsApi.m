% GearsApi - Gear operations
%
% GearsApi Properties:
%    apiClient - ApiClient instance
%
% GearsApi Methods
%    addGear           - Create or update a gear.
%    deleteGear        - Delete a gear (not recommended)
%    getAllGears       - List all gears
%    getGear           - Retrieve details about a specific gear
%    getGearContext    - Get context values for the given gear and container.
%    getGearInvocation - Get a schema for invoking a gear.
%    getGearSuggest    - Get files with input suggestions, parent containers, and child containers for the given container.
%    getGearTicket     - Retrieve a specific gear ticket
%    getMyGearTickets  - Retrieve all gear tickets for the current user
%    prepareAddGear    - Prepare a gear upload
%    saveGear          - Report the result of a gear upload and save the ticket
classdef GearsApi < handle
    % NOTE: This file is auto generated by the swagger code generator program.
    % Do not edit the file manually.
    properties
        apiClient
        context_
    end
    methods
        function obj = GearsApi(apiClient, context)
            obj.apiClient = apiClient;
            obj.context_ = context;
        end

        function [returnData, resp] = addGear(obj, gearIdOrName, body, varargin)
            % Create or update a gear.
            % gearIdOrName (char):Name of the gear to interact with
            % body (GearDoc)
            % returns: [CollectionNewOutput, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'gearIdOrName');
            addRequired(x__inp, 'body');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, gearIdOrName, body, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.gearIdOrName)
                pathParams = [pathParams, 'GearIdOrName', x__inp.Results.gearIdOrName];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = flywheel.model.GearDoc.ensureIsInstance(x__inp.Results.body);
            body = flywheel.ApiClient.encodeJson(body.toJson());

            resp = obj.apiClient.callApi('POST', '/gears/{GearIdOrName}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.CollectionNewOutput.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = deleteGear(obj, gearIdOrName, varargin)
            % Delete a gear (not recommended)
            % gearIdOrName (char):Id of the gear to interact with
            % returns: [none, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'gearIdOrName');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, gearIdOrName, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.gearIdOrName)
                pathParams = [pathParams, 'GearIdOrName', x__inp.Results.gearIdOrName];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('DELETE', '/gears/{GearIdOrName}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getAllGears(obj, varargin)
            % List all gears
            % allVersions (logical):return all versions of each gear
            % includeInvalid (logical):return gears with the 'invalid' flag set
            % filter (char):The filter to apply. (e.g. label=my-label,created>2018-09-22)
            % sort (char):The sort fields and order. (e.g. label:asc,created:desc)
            % limit (integer):The maximum number of entries to return.
            % skip (integer):The number of entries to skip.
            % page (integer):The page number (i.e. skip limit*page entries)
            % afterId (char):Paginate after the given id. (Cannot be used with sort, page or skip)
            % returns: [vector[GearDoc], resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addParameter(x__inp, 'allVersions', []);
            addParameter(x__inp, 'includeInvalid', []);
            addParameter(x__inp, 'filter', []);
            addParameter(x__inp, 'sort', []);
            addParameter(x__inp, 'limit', []);
            addParameter(x__inp, 'skip', []);
            addParameter(x__inp, 'page', []);
            addParameter(x__inp, 'afterId', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, varargin{:});

            % Path parameters
            pathParams = {};

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.allVersions)
                queryParams = [queryParams, 'all_versions', flywheel.ApiClient.castParam(x__inp.Results.allVersions, 'logical')];
            end
            if ~isempty(x__inp.Results.includeInvalid)
                queryParams = [queryParams, 'include_invalid', flywheel.ApiClient.castParam(x__inp.Results.includeInvalid, 'logical')];
            end
            if ~isempty(x__inp.Results.filter)
                queryParams = [queryParams, 'filter', flywheel.ApiClient.castParam(x__inp.Results.filter, 'char')];
            end
            if ~isempty(x__inp.Results.sort)
                queryParams = [queryParams, 'sort', flywheel.ApiClient.castParam(x__inp.Results.sort, 'char')];
            end
            if ~isempty(x__inp.Results.limit)
                queryParams = [queryParams, 'limit', flywheel.ApiClient.castParam(x__inp.Results.limit, 'integer')];
            end
            if ~isempty(x__inp.Results.skip)
                queryParams = [queryParams, 'skip', flywheel.ApiClient.castParam(x__inp.Results.skip, 'integer')];
            end
            if ~isempty(x__inp.Results.page)
                queryParams = [queryParams, 'page', flywheel.ApiClient.castParam(x__inp.Results.page, 'integer')];
            end
            if ~isempty(x__inp.Results.afterId)
                queryParams = [queryParams, 'after_id', flywheel.ApiClient.castParam(x__inp.Results.afterId, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/gears', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.ModelBase.cellmap(@(x) flywheel.model.GearDoc.fromJson(x, obj.context_), json);
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getGear(obj, gearIdOrName, varargin)
            % Retrieve details about a specific gear
            % gearIdOrName (char):Id of the gear to interact with
            % returns: [GearDoc, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'gearIdOrName');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, gearIdOrName, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.gearIdOrName)
                pathParams = [pathParams, 'GearIdOrName', x__inp.Results.gearIdOrName];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/gears/{GearIdOrName}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.GearDoc.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getGearContext(obj, gearId, containerType, containerId, varargin)
            % Get context values for the given gear and container.
            % gearId (char):Id of the gear to interact with
            % containerType (char):Type of the container to interact with
            % containerId (char):Id of the container to interact with
            % returns: [GearContextLookup, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'gearId');
            addRequired(x__inp, 'containerType');
            addRequired(x__inp, 'containerId');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, gearId, containerType, containerId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.gearId)
                pathParams = [pathParams, 'GearId', x__inp.Results.gearId];
            end
            if ~isempty(x__inp.Results.containerType)
                pathParams = [pathParams, 'ContainerType', x__inp.Results.containerType];
            end
            if ~isempty(x__inp.Results.containerId)
                pathParams = [pathParams, 'ContainerId', x__inp.Results.containerId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/gears/{GearId}/context/{ContainerType}/{ContainerId}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.GearContextLookup.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getGearInvocation(obj, gearId, varargin)
            % Get a schema for invoking a gear.
            % gearId (char):Id of the gear to interact with
            % returns: [containers.Map, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'gearId');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, gearId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.gearId)
                pathParams = [pathParams, 'GearId', x__inp.Results.gearId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/gears/{GearId}/invocation', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.containers.Map.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getGearSuggest(obj, gearId, containerType, containerId, varargin)
            % Get files with input suggestions, parent containers, and child containers for the given container.
            % gearId (char):Id of the gear to interact with
            % containerType (char):Type of the container to interact with
            % containerId (char):Id of the container to interact with
            % collectionId (char):Get suggestions for a collection
            % include (char):Include only \"children\" or \"files\"
            % returns: [containers.Map, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'gearId');
            addRequired(x__inp, 'containerType');
            addRequired(x__inp, 'containerId');
            addParameter(x__inp, 'collectionId', []);
            addParameter(x__inp, 'include', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, gearId, containerType, containerId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.gearId)
                pathParams = [pathParams, 'GearId', x__inp.Results.gearId];
            end
            if ~isempty(x__inp.Results.containerType)
                pathParams = [pathParams, 'ContainerType', x__inp.Results.containerType];
            end
            if ~isempty(x__inp.Results.containerId)
                pathParams = [pathParams, 'ContainerId', x__inp.Results.containerId];
            end

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.collectionId)
                queryParams = [queryParams, 'collectionId', flywheel.ApiClient.castParam(x__inp.Results.collectionId, 'char')];
            end
            if ~isempty(x__inp.Results.include)
                queryParams = [queryParams, 'include', flywheel.ApiClient.castParam(x__inp.Results.include, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/gears/{GearId}/suggest/{ContainerType}/{ContainerId}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.containers.Map.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getGearTicket(obj, gearTicketId, varargin)
            % Retrieve a specific gear ticket
            % gearTicketId (char):The ID of the the gear ticket to retrieve
            % returns: [containers.Map, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'gearTicketId');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, gearTicketId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.gearTicketId)
                pathParams = [pathParams, 'GearTicketId', x__inp.Results.gearTicketId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/gears/ticket/{GearTicketId}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.containers.Map.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getMyGearTickets(obj, varargin)
            % Retrieve all gear tickets for the current user
            % gearNamesOnly (logical):If set, returns a string array of ticket IDs instead of the tickets themselves.
            % returns: [containers.Map, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addParameter(x__inp, 'gearNamesOnly', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, varargin{:});

            % Path parameters
            pathParams = {};

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.gearNamesOnly)
                queryParams = [queryParams, 'gear_names_only', flywheel.ApiClient.castParam(x__inp.Results.gearNamesOnly, 'logical')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/gears/my-tickets', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.containers.Map.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = prepareAddGear(obj, varargin)
            % Prepare a gear upload
            % returns: [containers.Map, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, varargin{:});

            % Path parameters
            pathParams = {};

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('POST', '/gears/prepare-add', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.containers.Map.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = saveGear(obj, ticket, varargin)
            % Report the result of a gear upload and save the ticket
            % ticket (logical):The ticket ID to save
            % returns: [containers.Map, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'ticket');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, ticket, varargin{:});

            % Path parameters
            pathParams = {};

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.ticket)
                queryParams = [queryParams, 'ticket', flywheel.ApiClient.castParam(x__inp.Results.ticket, 'logical')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('POST', '/gears/save', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.containers.Map.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

    end
end
