% FilesApi - File upload/download operations
%
% FilesApi Properties:
%    apiClient - ApiClient instance
%
% FilesApi Methods
%    createDownloadTicket - Create a download ticket
%    downloadTicket       - Download files listed in the given ticket.
%    uploadByLabel        - Multipart form upload with N file fields, each with their desired filename.
%    uploadByReaper       - Bottom-up UID matching of Multipart form upload with N file fields, each with their desired filename.
%    uploadByUid          - Multipart form upload with N file fields, each with their desired filename.
%    uploadMatchUid       - Multipart form upload with N file fields, each with their desired filename.
classdef FilesApi < handle
    % NOTE: This file is auto generated by the swagger code generator program.
    % Do not edit the file manually.
    properties
        apiClient
        context_
    end
    methods
        function obj = FilesApi(apiClient, context)
            obj.apiClient = apiClient;
            obj.context_ = context;
        end

        function [returnData, resp] = createDownloadTicket(obj, body, varargin)
            % Create a download ticket
            % body (Download):Download files with tag 'incomplete' OR type 'dicom'
            % type (char):The download type, one of: bulk, classic or full. Default is classic.
            % analyses (logical):For \"full\" download, whether or not to include analyses. Default is false.
            % metadata (logical):For \"full\" download, whether or not to include metadata sidecars. Default is false.
            % prefix (char):A string to customize the name of the download in the format <prefix>_<timestamp>.tar. Defaults to \"scitran\". 
            % returns: [DownloadTicketWithSummary, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'body');
            addParameter(x__inp, 'type', []);
            addParameter(x__inp, 'analyses', []);
            addParameter(x__inp, 'metadata', []);
            addParameter(x__inp, 'prefix', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, body, varargin{:});

            % Path parameters
            pathParams = {};

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.type)
                queryParams = [queryParams, 'type', flywheel.ApiClient.castParam(x__inp.Results.type, 'char')];
            end
            if ~isempty(x__inp.Results.analyses)
                queryParams = [queryParams, 'analyses', flywheel.ApiClient.castParam(x__inp.Results.analyses, 'logical')];
            end
            if ~isempty(x__inp.Results.metadata)
                queryParams = [queryParams, 'metadata', flywheel.ApiClient.castParam(x__inp.Results.metadata, 'logical')];
            end
            if ~isempty(x__inp.Results.prefix)
                queryParams = [queryParams, 'prefix', flywheel.ApiClient.castParam(x__inp.Results.prefix, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = flywheel.model.Download.ensureIsInstance(x__inp.Results.body);
            body = flywheel.ApiClient.encodeJson(body.toJson());

            resp = obj.apiClient.callApi('POST', '/download', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.DownloadTicketWithSummary.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = downloadTicket(obj, ticket, varargin)
            % Download files listed in the given ticket.
            % ticket (char):ID of the download ticket
            % destFile - Destination file path
            % returns: [none, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'ticket');
            addRequired(x__inp, 'destFile');
            addParameter(x__inp, 'OutputType', 'double');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, ticket, varargin{:});

            % Path parameters
            pathParams = {};

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.ticket)
                queryParams = [queryParams, 'ticket', flywheel.ApiClient.castParam(x__inp.Results.ticket, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/download', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    destFile = x__inp.Results.destFile;
                    if ~isempty(destFile)
                        resp.saveResponseBodyToFile(destFile);
                        returnData = destFile;
                    else
                        returnData = resp.getBodyData(x__inp.Results.OutputType);
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = uploadByLabel(obj, varargin)
            % Multipart form upload with N file fields, each with their desired filename.
            % body (char):Object encoded as a JSON string. It is **required** and used **only** when the ``ticket`` parameter is used. See ``schemas/input/signedurlmetadata.json`` for the format of the json payload. 
            % formData (char)
            % ticket (char):Use empty value to get a ticket, and provide the ticket id to finalize the upload
            % returns: [containers.Map, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addParameter(x__inp, 'body', []);
            addParameter(x__inp, 'formData', []);
            addParameter(x__inp, 'ticket', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, varargin{:});

            % Path parameters
            pathParams = {};

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.ticket)
                queryParams = [queryParams, 'ticket', flywheel.ApiClient.castParam(x__inp.Results.ticket, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};
            if ~isempty(x__inp.Results.body)
                formParams = [formParams, 'body', x__inp.Results.body];
            end
            if ~isempty(x__inp.Results.formData)
                formParams = [formParams, 'formData', x__inp.Results.formData];
            end

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('POST', '/upload/label', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.containers.Map.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = uploadByReaper(obj, varargin)
            % Bottom-up UID matching of Multipart form upload with N file fields, each with their desired filename.
            % body (char):Object encoded as a JSON string. It is **required** and used **only** when the ``ticket`` parameter is used. See ``schemas/input/signedurlmetadata.json`` for the format of the json payload. 
            % formData (char)
            % ticket (char):Use empty value to get a ticket, and provide the ticket id to finalize the upload
            % returns: [vector[FileEntry], resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addParameter(x__inp, 'body', []);
            addParameter(x__inp, 'formData', []);
            addParameter(x__inp, 'ticket', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, varargin{:});

            % Path parameters
            pathParams = {};

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.ticket)
                queryParams = [queryParams, 'ticket', flywheel.ApiClient.castParam(x__inp.Results.ticket, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};
            if ~isempty(x__inp.Results.body)
                formParams = [formParams, 'body', x__inp.Results.body];
            end
            if ~isempty(x__inp.Results.formData)
                formParams = [formParams, 'formData', x__inp.Results.formData];
            end

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('POST', '/upload/reaper', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.ModelBase.cellmap(@(x) flywheel.model.FileEntry.fromJson(x, obj.context_), json);
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = uploadByUid(obj, varargin)
            % Multipart form upload with N file fields, each with their desired filename.
            % body (char):Object encoded as a JSON string. It is **required** and used **only** when the ``ticket`` parameter is used. See ``schemas/input/signedurlmetadata.json`` for the format of the json payload. 
            % formData (char)
            % ticket (char):Use empty value to get a ticket, and provide the ticket id to finalize the upload
            % returns: [containers.Map, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addParameter(x__inp, 'body', []);
            addParameter(x__inp, 'formData', []);
            addParameter(x__inp, 'ticket', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, varargin{:});

            % Path parameters
            pathParams = {};

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.ticket)
                queryParams = [queryParams, 'ticket', flywheel.ApiClient.castParam(x__inp.Results.ticket, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};
            if ~isempty(x__inp.Results.body)
                formParams = [formParams, 'body', x__inp.Results.body];
            end
            if ~isempty(x__inp.Results.formData)
                formParams = [formParams, 'formData', x__inp.Results.formData];
            end

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('POST', '/upload/uid', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.containers.Map.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = uploadMatchUid(obj, varargin)
            % Multipart form upload with N file fields, each with their desired filename.
            % body (char):Object encoded as a JSON string. It is **required** and used **only** when the ``ticket`` parameter is used. See ``schemas/input/signedurlmetadata.json`` for the format of the json payload. 
            % formData (char)
            % ticket (char):Use empty value to get a ticket, and provide the ticket id to finalize the upload
            % returns: [containers.Map, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addParameter(x__inp, 'body', []);
            addParameter(x__inp, 'formData', []);
            addParameter(x__inp, 'ticket', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, varargin{:});

            % Path parameters
            pathParams = {};

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.ticket)
                queryParams = [queryParams, 'ticket', flywheel.ApiClient.castParam(x__inp.Results.ticket, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};
            if ~isempty(x__inp.Results.body)
                formParams = [formParams, 'body', x__inp.Results.body];
            end
            if ~isempty(x__inp.Results.formData)
                formParams = [formParams, 'formData', x__inp.Results.formData];
            end

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('POST', '/upload/uid-match', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.containers.Map.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

    end
end
