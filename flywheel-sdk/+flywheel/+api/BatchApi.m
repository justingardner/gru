% BatchApi - Batch job operations
%
% BatchApi Properties:
%    apiClient - ApiClient instance
%
% BatchApi Methods
%    cancelBatch            - Cancel a Job
%    createBatchJobFromJobs - Create a batch job proposal from preconstructed jobs and insert it as 'pending'.
%    getAllBatches          - Get a list of batch jobs the user has created.
%    getBatch               - Get batch job details.
%    proposeBatch           - Create a batch job proposal and insert it as 'pending'.
%    startBatch             - Launch a job.
classdef BatchApi < handle
    % NOTE: This file is auto generated by the swagger code generator program.
    % Do not edit the file manually.
    properties
        apiClient
        context_
    end
    methods
        function obj = BatchApi(apiClient, context)
            obj.apiClient = apiClient;
            obj.context_ = context;
        end

        function [returnData, resp] = cancelBatch(obj, batchId, varargin)
            % Cancel a Job
            % batchId (char)
            % returns: [BatchCancelOutput, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'batchId');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, batchId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.batchId)
                pathParams = [pathParams, 'BatchId', x__inp.Results.batchId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('POST', '/batch/{BatchId}/cancel', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.BatchCancelOutput.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = createBatchJobFromJobs(obj, body, varargin)
            % Create a batch job proposal from preconstructed jobs and insert it as 'pending'.
            % body (BatchJobsProposalInput):Set of jobs to be run as a batch
            % returns: [BatchProposal, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'body');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, body, varargin{:});

            % Path parameters
            pathParams = {};

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = flywheel.model.BatchJobsProposalInput.ensureIsInstance(x__inp.Results.body);
            body = flywheel.ApiClient.encodeJson(body.toJson());

            resp = obj.apiClient.callApi('POST', '/batch/jobs', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.BatchProposal.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getAllBatches(obj, varargin)
            % Get a list of batch jobs the user has created.
            % returns: [vector[Batch], resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, varargin{:});

            % Path parameters
            pathParams = {};

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/batch', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.ModelBase.cellmap(@(x) flywheel.model.Batch.fromJson(x, obj.context_), json);
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getBatch(obj, batchId, varargin)
            % Get batch job details.
            % batchId (char)
            % jobs (logical):If true, return job objects instead of job ids
            % returns: [Batch, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'batchId');
            addParameter(x__inp, 'jobs', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, batchId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.batchId)
                pathParams = [pathParams, 'BatchId', x__inp.Results.batchId];
            end

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.jobs)
                queryParams = [queryParams, 'jobs', flywheel.ApiClient.castParam(x__inp.Results.jobs, 'logical')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/batch/{BatchId}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.Batch.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = proposeBatch(obj, body, varargin)
            % Create a batch job proposal and insert it as 'pending'.
            % body (BatchProposalInput):The batch proposal
            % returns: [BatchProposal, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'body');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, body, varargin{:});

            % Path parameters
            pathParams = {};

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = flywheel.model.BatchProposalInput.ensureIsInstance(x__inp.Results.body);
            body = flywheel.ApiClient.encodeJson(body.toJson());

            resp = obj.apiClient.callApi('POST', '/batch', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.BatchProposal.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = startBatch(obj, batchId, varargin)
            % Launch a job.
            % batchId (char)
            % returns: [vector[Job], resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'batchId');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, batchId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.batchId)
                pathParams = [pathParams, 'BatchId', x__inp.Results.batchId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('POST', '/batch/{BatchId}/run', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.ModelBase.cellmap(@(x) flywheel.model.Job.fromJson(x, obj.context_), json);
                otherwise
                    returnData = [];
            end
        end

    end
end
