% CollectionsApi - Collection operations
%
% CollectionsApi Properties:
%    apiClient - ApiClient instance
%
% CollectionsApi Methods
%    addCollection                             - Create a collection
%    addCollectionAnalysis                     - Create an analysis and upload files.
%    addCollectionAnalysisNote                 - Add a note to collection analysis.
%    addCollectionNote                         - Add a note to collection.
%    addCollectionPermission                   - Add a permission
%    addCollectionTag                          - Add a tag to collection.
%    deleteCollection                          - Delete a collection
%    deleteCollectionAnalysis                  - Delete an anaylsis
%    deleteCollectionAnalysisNote              - Remove a note from collection analysis.
%    deleteCollectionFile                      - Delete a file
%    deleteCollectionNote                      - Remove a note from collection
%    deleteCollectionTag                       - Delete a tag
%    deleteCollectionUserPermission            - Delete a permission
%    downloadCollectionAnalysisInputs          - Download analysis inputs.
%    downloadCollectionAnalysisOutputs         - Download analysis outputs.
%    downloadFileFromCollection                - Download a file.
%    getCollectionFileZipInfo                  - Download a file.
%    getCollectionDownloadTicket               - Download a file.
%    downloadInputFromCollectionAnalysis       - Download analysis inputs with filter.
%    getCollectionAnalysisInputZipInfo         - Download analysis inputs with filter.
%    getCollectionAnalysisInputDownloadTicket  - Download analysis inputs with filter.
%    downloadOutputFromCollectionAnalysis      - Download analysis outputs with filter.
%    getCollectionAnalysisOutputZipInfo        - Download analysis outputs with filter.
%    getCollectionAnalysisOutputDownloadTicket - Download analysis outputs with filter.
%    getAllCollections                         - List all collections.
%    getAllCollectionsCurators                 - List all curators of collections
%    getCollection                             - Retrieve a single collection
%    getCollectionAcquisitions                 - List acquisitions in a collection
%    getCollectionAnalyses                     - Get analyses for collection.
%    getCollectionAnalysis                     - Get an analysis.
%    getCollectionFileInfo                     - Get info for a particular file.
%    getCollectionNote                         - Get a note on collection.
%    getCollectionSessions                     - List sessions in a collection
%    getCollectionTag                          - Get the value of a tag, by name.
%    getCollectionUserPermission               - List a user's permissions for this collection.
%    modifyCollection                          - Update a collection and its contents
%    modifyCollectionAnalysis                  - Modify an analysis.
%    modifyCollectionFile                      - Modify a file's attributes
%    modifyCollectionFileClassification        - Update classification for a particular file.
%    modifyCollectionFileInfo                  - Update info for a particular file.
%    modifyCollectionInfo                      - Update or replace info for a collection.
%    modifyCollectionNote                      - Update a note on collection.
%    modifyCollectionUserPermission            - Update a user's permission for this collection.
%    renameCollectionTag                       - Rename a tag.
%    replaceCollectionFile                     - Replace a file
%    uploadFileToCollection                    - Upload a file to collection.
%    uploadOutputToCollectionAnalysis          - Upload an output file to analysis.
classdef CollectionsApi < handle
    % NOTE: This file is auto generated by the swagger code generator program.
    % Do not edit the file manually.
    properties
        apiClient
        context_
    end
    methods
        function obj = CollectionsApi(apiClient, context)
            obj.apiClient = apiClient;
            obj.context_ = context;
        end

        function [returnData, resp] = addCollection(obj, body, varargin)
            % Create a collection
            % body (Collection)
            % returns: [CollectionNewOutput, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'body');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, body, varargin{:});

            % Path parameters
            pathParams = {};

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = flywheel.model.Collection.ensureIsInstance(x__inp.Results.body);
            body = flywheel.ApiClient.encodeJson(body.toJson());

            resp = obj.apiClient.callApi('POST', '/collections', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.CollectionNewOutput.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = addCollectionAnalysis(obj, collectionId, body, varargin)
            % Create an analysis and upload files.
            % collectionId (char)
            % body (AnalysisInput)
            % job (logical):Return job as an object instead of an id
            % returns: [ContainerNewOutput, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'body');
            addParameter(x__inp, 'job', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, body, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.job)
                queryParams = [queryParams, 'job', flywheel.ApiClient.castParam(x__inp.Results.job, 'logical')];
            else
                queryParams = [queryParams, 'job', 'true'];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = flywheel.model.AnalysisInput.ensureIsInstance(x__inp.Results.body);
            body = flywheel.ApiClient.encodeJson(body.toJson());

            resp = obj.apiClient.callApi('POST', '/collections/{CollectionId}/analyses', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.ContainerNewOutput.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = addCollectionAnalysisNote(obj, collectionId, analysisId, body, varargin)
            % Add a note to collection analysis.
            % collectionId (char)
            % analysisId (char)
            % body (Note)
            % returns: [InlineResponse200, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'analysisId');
            addRequired(x__inp, 'body');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, analysisId, body, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end
            if ~isempty(x__inp.Results.analysisId)
                pathParams = [pathParams, 'AnalysisId', x__inp.Results.analysisId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = flywheel.model.Note.ensureIsInstance(x__inp.Results.body);
            body = flywheel.ApiClient.encodeJson(body.toJson());

            resp = obj.apiClient.callApi('POST', '/collections/{CollectionId}/analyses/{AnalysisId}/notes', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse200.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = addCollectionNote(obj, collectionId, body, varargin)
            % Add a note to collection.
            % collectionId (char)
            % body (Note)
            % returns: [InlineResponse200, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'body');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, body, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = flywheel.model.Note.ensureIsInstance(x__inp.Results.body);
            body = flywheel.ApiClient.encodeJson(body.toJson());

            resp = obj.apiClient.callApi('POST', '/collections/{CollectionId}/notes', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse200.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = addCollectionPermission(obj, collectionId, body, varargin)
            % Add a permission
            % collectionId (char)
            % body (Permission)
            % returns: [InlineResponse200, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'body');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, body, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = flywheel.model.Permission.ensureIsInstance(x__inp.Results.body);
            body = flywheel.ApiClient.encodeJson(body.toJson());

            resp = obj.apiClient.callApi('POST', '/collections/{CollectionId}/permissions', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse200.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = addCollectionTag(obj, collectionId, body, varargin)
            % Add a tag to collection.
            % collectionId (char)
            % body (Tag)
            % returns: [InlineResponse200, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'body');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, body, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = flywheel.model.Tag.ensureIsInstance(x__inp.Results.body);
            body = flywheel.ApiClient.encodeJson(body.toJson());

            resp = obj.apiClient.callApi('POST', '/collections/{CollectionId}/tags', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse200.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = deleteCollection(obj, collectionId, varargin)
            % Delete a collection
            % collectionId (char)
            % returns: [none, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('DELETE', '/collections/{CollectionId}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = deleteCollectionAnalysis(obj, collectionId, analysisId, varargin)
            % Delete an anaylsis
            % collectionId (char)
            % analysisId (char)
            % returns: [InlineResponse2002, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'analysisId');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, analysisId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end
            if ~isempty(x__inp.Results.analysisId)
                pathParams = [pathParams, 'AnalysisId', x__inp.Results.analysisId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('DELETE', '/collections/{CollectionId}/analyses/{AnalysisId}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse2002.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = deleteCollectionAnalysisNote(obj, collectionId, analysisId, noteId, varargin)
            % Remove a note from collection analysis.
            % collectionId (char)
            % analysisId (char)
            % noteId (char)
            % returns: [InlineResponse200, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'analysisId');
            addRequired(x__inp, 'noteId');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, analysisId, noteId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end
            if ~isempty(x__inp.Results.analysisId)
                pathParams = [pathParams, 'AnalysisId', x__inp.Results.analysisId];
            end
            if ~isempty(x__inp.Results.noteId)
                pathParams = [pathParams, 'NoteId', x__inp.Results.noteId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('DELETE', '/collections/{CollectionId}/analyses/{AnalysisId}/notes/{NoteId}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse200.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = deleteCollectionFile(obj, collectionId, fileName, varargin)
            % Delete a file
            % collectionId (char)
            % fileName (char)
            % returns: [InlineResponse200, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'fileName');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, fileName, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end
            if ~isempty(x__inp.Results.fileName)
                pathParams = [pathParams, 'FileName', x__inp.Results.fileName];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('DELETE', '/collections/{CollectionId}/files/{FileName}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse200.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = deleteCollectionNote(obj, collectionId, noteId, varargin)
            % Remove a note from collection
            % collectionId (char)
            % noteId (char)
            % returns: [InlineResponse200, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'noteId');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, noteId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end
            if ~isempty(x__inp.Results.noteId)
                pathParams = [pathParams, 'NoteId', x__inp.Results.noteId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('DELETE', '/collections/{CollectionId}/notes/{NoteId}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse200.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = deleteCollectionTag(obj, collectionId, tagValue, varargin)
            % Delete a tag
            % collectionId (char)
            % tagValue (char):The tag to interact with
            % returns: [InlineResponse200, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'tagValue');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, tagValue, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end
            if ~isempty(x__inp.Results.tagValue)
                pathParams = [pathParams, 'TagValue', x__inp.Results.tagValue];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('DELETE', '/collections/{CollectionId}/tags/{TagValue}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse200.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = deleteCollectionUserPermission(obj, collectionId, userId, varargin)
            % Delete a permission
            % collectionId (char)
            % userId (char)
            % returns: [InlineResponse200, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'userId');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, userId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end
            if ~isempty(x__inp.Results.userId)
                pathParams = [pathParams, 'UserId', x__inp.Results.userId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('DELETE', '/collections/{CollectionId}/permissions/{UserId}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse200.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = downloadCollectionAnalysisInputs(obj, collectionId, analysisId, varargin)
            % Download analysis inputs.
            % collectionId (char)
            % analysisId (char)
            % ticket (char):ticket id of the inputs to download
            % returns: [AnalysisFilesCreateTicketOutput, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'analysisId');
            addParameter(x__inp, 'ticket', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, analysisId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end
            if ~isempty(x__inp.Results.analysisId)
                pathParams = [pathParams, 'AnalysisId', x__inp.Results.analysisId];
            end

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.ticket)
                queryParams = [queryParams, 'ticket', flywheel.ApiClient.castParam(x__inp.Results.ticket, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/collections/{CollectionId}/analyses/{AnalysisId}/inputs', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.AnalysisFilesCreateTicketOutput.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = downloadCollectionAnalysisOutputs(obj, collectionId, analysisId, varargin)
            % Download analysis outputs.
            % collectionId (char)
            % analysisId (char)
            % ticket (char):ticket id of the outputs to download
            % returns: [AnalysisFilesCreateTicketOutput, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'analysisId');
            addParameter(x__inp, 'ticket', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, analysisId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end
            if ~isempty(x__inp.Results.analysisId)
                pathParams = [pathParams, 'AnalysisId', x__inp.Results.analysisId];
            end

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.ticket)
                queryParams = [queryParams, 'ticket', flywheel.ApiClient.castParam(x__inp.Results.ticket, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/collections/{CollectionId}/analyses/{AnalysisId}/files', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.AnalysisFilesCreateTicketOutput.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = downloadFileFromCollection(obj, collectionId, fileName, varargin)
            % Download a file.
            % collectionId (char)
            % fileName (char)
            % view (logical):If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
            % info (logical):If the file is a zipfile, return a json response of zipfile member information
            % member (char):The filename of a zipfile member to download rather than the entire file
            % signature (char):Url's signature (signed download url)
            % expires (char):Signed url expiration time (epoch time)
            % destFile - Destination file path
            % returns: [DownloadTicket, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'fileName');
            addParameter(x__inp, 'view', []);
            addParameter(x__inp, 'info', []);
            addParameter(x__inp, 'member', []);
            addParameter(x__inp, 'signature', []);
            addParameter(x__inp, 'expires', []);
            addRequired(x__inp, 'destFile');
            addParameter(x__inp, 'OutputType', 'double');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, fileName, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end
            if ~isempty(x__inp.Results.fileName)
                pathParams = [pathParams, 'FileName', x__inp.Results.fileName];
            end

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.view)
                queryParams = [queryParams, 'view', flywheel.ApiClient.castParam(x__inp.Results.view, 'logical')];
            end
            if ~isempty(x__inp.Results.info)
                queryParams = [queryParams, 'info', flywheel.ApiClient.castParam(x__inp.Results.info, 'logical')];
            end
            if ~isempty(x__inp.Results.member)
                queryParams = [queryParams, 'member', flywheel.ApiClient.castParam(x__inp.Results.member, 'char')];
            end
            if ~isempty(x__inp.Results.signature)
                queryParams = [queryParams, 'signature', flywheel.ApiClient.castParam(x__inp.Results.signature, 'char')];
            end
            if ~isempty(x__inp.Results.expires)
                queryParams = [queryParams, 'expires', flywheel.ApiClient.castParam(x__inp.Results.expires, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/collections/{CollectionId}/files/{FileName}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    destFile = x__inp.Results.destFile;
                    if ~isempty(destFile)
                        resp.saveResponseBodyToFile(destFile);
                        returnData = destFile;
                    else
                        returnData = resp.getBodyData(x__inp.Results.OutputType);
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getCollectionFileZipInfo(obj, collectionId, fileName, varargin)
            % Download a file.
            % collectionId (char)
            % fileName (char)
            % ticket (char):The generated ticket id for the download, or present but empty to generate a ticket id
            % view (logical):If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
            % info (logical):If the file is a zipfile, return a json response of zipfile member information
            % member (char):The filename of a zipfile member to download rather than the entire file
            % signature (char):Url's signature (signed download url)
            % expires (char):Signed url expiration time (epoch time)
            % returns: [FileZipInfo, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'fileName');
            addParameter(x__inp, 'ticket', []);
            addParameter(x__inp, 'view', []);
            addParameter(x__inp, 'info', []);
            addParameter(x__inp, 'member', []);
            addParameter(x__inp, 'signature', []);
            addParameter(x__inp, 'expires', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, fileName, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end
            if ~isempty(x__inp.Results.fileName)
                pathParams = [pathParams, 'FileName', x__inp.Results.fileName];
            end

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.ticket)
                queryParams = [queryParams, 'ticket', flywheel.ApiClient.castParam(x__inp.Results.ticket, 'char')];
            end
            if ~isempty(x__inp.Results.view)
                queryParams = [queryParams, 'view', flywheel.ApiClient.castParam(x__inp.Results.view, 'logical')];
            end
            if ~isempty(x__inp.Results.info)
                queryParams = [queryParams, 'info', flywheel.ApiClient.castParam(x__inp.Results.info, 'logical')];
            else
                queryParams = [queryParams, 'info', 'true'];
            end
            if ~isempty(x__inp.Results.member)
                queryParams = [queryParams, 'member', flywheel.ApiClient.castParam(x__inp.Results.member, 'char')];
            end
            if ~isempty(x__inp.Results.signature)
                queryParams = [queryParams, 'signature', flywheel.ApiClient.castParam(x__inp.Results.signature, 'char')];
            end
            if ~isempty(x__inp.Results.expires)
                queryParams = [queryParams, 'expires', flywheel.ApiClient.castParam(x__inp.Results.expires, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/collections/{CollectionId}/files/{FileName}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.FileZipInfo.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getCollectionDownloadTicket(obj, collectionId, fileName, varargin)
            % Download a file.
            % collectionId (char)
            % fileName (char)
            % ticket (char):The generated ticket id for the download, or present but empty to generate a ticket id
            % view (logical):If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
            % info (logical):If the file is a zipfile, return a json response of zipfile member information
            % member (char):The filename of a zipfile member to download rather than the entire file
            % signature (char):Url's signature (signed download url)
            % expires (char):Signed url expiration time (epoch time)
            % returns: [DownloadTicket, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'fileName');
            addParameter(x__inp, 'ticket', []);
            addParameter(x__inp, 'view', []);
            addParameter(x__inp, 'info', []);
            addParameter(x__inp, 'member', []);
            addParameter(x__inp, 'signature', []);
            addParameter(x__inp, 'expires', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, fileName, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end
            if ~isempty(x__inp.Results.fileName)
                pathParams = [pathParams, 'FileName', x__inp.Results.fileName];
            end

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.ticket)
                queryParams = [queryParams, 'ticket', flywheel.ApiClient.castParam(x__inp.Results.ticket, 'char')];
            end
            if ~isempty(x__inp.Results.view)
                queryParams = [queryParams, 'view', flywheel.ApiClient.castParam(x__inp.Results.view, 'logical')];
            end
            if ~isempty(x__inp.Results.info)
                queryParams = [queryParams, 'info', flywheel.ApiClient.castParam(x__inp.Results.info, 'logical')];
            end
            if ~isempty(x__inp.Results.member)
                queryParams = [queryParams, 'member', flywheel.ApiClient.castParam(x__inp.Results.member, 'char')];
            end
            if ~isempty(x__inp.Results.signature)
                queryParams = [queryParams, 'signature', flywheel.ApiClient.castParam(x__inp.Results.signature, 'char')];
            end
            if ~isempty(x__inp.Results.expires)
                queryParams = [queryParams, 'expires', flywheel.ApiClient.castParam(x__inp.Results.expires, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/collections/{CollectionId}/files/{FileName}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.DownloadTicket.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = downloadInputFromCollectionAnalysis(obj, collectionId, analysisId, filename, varargin)
            % Download analysis inputs with filter.
            % collectionId (char)
            % analysisId (char)
            % filename (char):filename to download (get tar of all if empty)
            % info (logical):If the file is a zipfile, return a json response of zipfile member information
            % member (char):The filename of a zipfile member to download rather than the entire file
            % destFile - Destination file path
            % returns: [AnalysisFilesCreateTicketOutput, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'analysisId');
            addRequired(x__inp, 'filename');
            addParameter(x__inp, 'info', []);
            addParameter(x__inp, 'member', []);
            addRequired(x__inp, 'destFile');
            addParameter(x__inp, 'OutputType', 'double');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, analysisId, filename, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end
            if ~isempty(x__inp.Results.analysisId)
                pathParams = [pathParams, 'AnalysisId', x__inp.Results.analysisId];
            end
            if ~isempty(x__inp.Results.filename)
                pathParams = [pathParams, 'Filename', x__inp.Results.filename];
            end

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.info)
                queryParams = [queryParams, 'info', flywheel.ApiClient.castParam(x__inp.Results.info, 'logical')];
            end
            if ~isempty(x__inp.Results.member)
                queryParams = [queryParams, 'member', flywheel.ApiClient.castParam(x__inp.Results.member, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/collections/{CollectionId}/analyses/{AnalysisId}/inputs/{Filename}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    destFile = x__inp.Results.destFile;
                    if ~isempty(destFile)
                        resp.saveResponseBodyToFile(destFile);
                        returnData = destFile;
                    else
                        returnData = resp.getBodyData(x__inp.Results.OutputType);
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getCollectionAnalysisInputZipInfo(obj, collectionId, analysisId, filename, varargin)
            % Download analysis inputs with filter.
            % collectionId (char)
            % analysisId (char)
            % filename (char):filename to download (get tar of all if empty)
            % ticket (char):ticket id of the inputs to download
            % info (logical):If the file is a zipfile, return a json response of zipfile member information
            % member (char):The filename of a zipfile member to download rather than the entire file
            % returns: [FileZipInfo, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'analysisId');
            addRequired(x__inp, 'filename');
            addParameter(x__inp, 'ticket', []);
            addParameter(x__inp, 'info', []);
            addParameter(x__inp, 'member', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, analysisId, filename, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end
            if ~isempty(x__inp.Results.analysisId)
                pathParams = [pathParams, 'AnalysisId', x__inp.Results.analysisId];
            end
            if ~isempty(x__inp.Results.filename)
                pathParams = [pathParams, 'Filename', x__inp.Results.filename];
            end

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.ticket)
                queryParams = [queryParams, 'ticket', flywheel.ApiClient.castParam(x__inp.Results.ticket, 'char')];
            end
            if ~isempty(x__inp.Results.info)
                queryParams = [queryParams, 'info', flywheel.ApiClient.castParam(x__inp.Results.info, 'logical')];
            else
                queryParams = [queryParams, 'info', 'true'];
            end
            if ~isempty(x__inp.Results.member)
                queryParams = [queryParams, 'member', flywheel.ApiClient.castParam(x__inp.Results.member, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/collections/{CollectionId}/analyses/{AnalysisId}/inputs/{Filename}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.FileZipInfo.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getCollectionAnalysisInputDownloadTicket(obj, collectionId, analysisId, filename, varargin)
            % Download analysis inputs with filter.
            % collectionId (char)
            % analysisId (char)
            % filename (char):filename to download (get tar of all if empty)
            % ticket (char):ticket id of the inputs to download
            % info (logical):If the file is a zipfile, return a json response of zipfile member information
            % member (char):The filename of a zipfile member to download rather than the entire file
            % returns: [AnalysisFilesCreateTicketOutput, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'analysisId');
            addRequired(x__inp, 'filename');
            addParameter(x__inp, 'ticket', []);
            addParameter(x__inp, 'info', []);
            addParameter(x__inp, 'member', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, analysisId, filename, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end
            if ~isempty(x__inp.Results.analysisId)
                pathParams = [pathParams, 'AnalysisId', x__inp.Results.analysisId];
            end
            if ~isempty(x__inp.Results.filename)
                pathParams = [pathParams, 'Filename', x__inp.Results.filename];
            end

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.ticket)
                queryParams = [queryParams, 'ticket', flywheel.ApiClient.castParam(x__inp.Results.ticket, 'char')];
            end
            if ~isempty(x__inp.Results.info)
                queryParams = [queryParams, 'info', flywheel.ApiClient.castParam(x__inp.Results.info, 'logical')];
            end
            if ~isempty(x__inp.Results.member)
                queryParams = [queryParams, 'member', flywheel.ApiClient.castParam(x__inp.Results.member, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/collections/{CollectionId}/analyses/{AnalysisId}/inputs/{Filename}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.AnalysisFilesCreateTicketOutput.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = downloadOutputFromCollectionAnalysis(obj, collectionId, analysisId, filename, varargin)
            % Download analysis outputs with filter.
            % collectionId (char)
            % analysisId (char)
            % filename (char):filename to download (get tar of all if empty)
            % info (logical):If the file is a zipfile, return a json response of zipfile member information
            % member (char):The filename of a zipfile member to download rather than the entire file
            % destFile - Destination file path
            % returns: [AnalysisFilesCreateTicketOutput, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'analysisId');
            addRequired(x__inp, 'filename');
            addParameter(x__inp, 'info', []);
            addParameter(x__inp, 'member', []);
            addRequired(x__inp, 'destFile');
            addParameter(x__inp, 'OutputType', 'double');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, analysisId, filename, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end
            if ~isempty(x__inp.Results.analysisId)
                pathParams = [pathParams, 'AnalysisId', x__inp.Results.analysisId];
            end
            if ~isempty(x__inp.Results.filename)
                pathParams = [pathParams, 'Filename', x__inp.Results.filename];
            end

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.info)
                queryParams = [queryParams, 'info', flywheel.ApiClient.castParam(x__inp.Results.info, 'logical')];
            end
            if ~isempty(x__inp.Results.member)
                queryParams = [queryParams, 'member', flywheel.ApiClient.castParam(x__inp.Results.member, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/collections/{CollectionId}/analyses/{AnalysisId}/files/{Filename}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    destFile = x__inp.Results.destFile;
                    if ~isempty(destFile)
                        resp.saveResponseBodyToFile(destFile);
                        returnData = destFile;
                    else
                        returnData = resp.getBodyData(x__inp.Results.OutputType);
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getCollectionAnalysisOutputZipInfo(obj, collectionId, analysisId, filename, varargin)
            % Download analysis outputs with filter.
            % collectionId (char)
            % analysisId (char)
            % filename (char):filename to download (get tar of all if empty)
            % ticket (char):ticket id of the outputs to download
            % info (logical):If the file is a zipfile, return a json response of zipfile member information
            % member (char):The filename of a zipfile member to download rather than the entire file
            % returns: [FileZipInfo, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'analysisId');
            addRequired(x__inp, 'filename');
            addParameter(x__inp, 'ticket', []);
            addParameter(x__inp, 'info', []);
            addParameter(x__inp, 'member', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, analysisId, filename, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end
            if ~isempty(x__inp.Results.analysisId)
                pathParams = [pathParams, 'AnalysisId', x__inp.Results.analysisId];
            end
            if ~isempty(x__inp.Results.filename)
                pathParams = [pathParams, 'Filename', x__inp.Results.filename];
            end

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.ticket)
                queryParams = [queryParams, 'ticket', flywheel.ApiClient.castParam(x__inp.Results.ticket, 'char')];
            end
            if ~isempty(x__inp.Results.info)
                queryParams = [queryParams, 'info', flywheel.ApiClient.castParam(x__inp.Results.info, 'logical')];
            else
                queryParams = [queryParams, 'info', 'true'];
            end
            if ~isempty(x__inp.Results.member)
                queryParams = [queryParams, 'member', flywheel.ApiClient.castParam(x__inp.Results.member, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/collections/{CollectionId}/analyses/{AnalysisId}/files/{Filename}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.FileZipInfo.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getCollectionAnalysisOutputDownloadTicket(obj, collectionId, analysisId, filename, varargin)
            % Download analysis outputs with filter.
            % collectionId (char)
            % analysisId (char)
            % filename (char):filename to download (get tar of all if empty)
            % ticket (char):ticket id of the outputs to download
            % info (logical):If the file is a zipfile, return a json response of zipfile member information
            % member (char):The filename of a zipfile member to download rather than the entire file
            % returns: [AnalysisFilesCreateTicketOutput, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'analysisId');
            addRequired(x__inp, 'filename');
            addParameter(x__inp, 'ticket', []);
            addParameter(x__inp, 'info', []);
            addParameter(x__inp, 'member', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, analysisId, filename, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end
            if ~isempty(x__inp.Results.analysisId)
                pathParams = [pathParams, 'AnalysisId', x__inp.Results.analysisId];
            end
            if ~isempty(x__inp.Results.filename)
                pathParams = [pathParams, 'Filename', x__inp.Results.filename];
            end

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.ticket)
                queryParams = [queryParams, 'ticket', flywheel.ApiClient.castParam(x__inp.Results.ticket, 'char')];
            end
            if ~isempty(x__inp.Results.info)
                queryParams = [queryParams, 'info', flywheel.ApiClient.castParam(x__inp.Results.info, 'logical')];
            end
            if ~isempty(x__inp.Results.member)
                queryParams = [queryParams, 'member', flywheel.ApiClient.castParam(x__inp.Results.member, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/collections/{CollectionId}/analyses/{AnalysisId}/files/{Filename}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.AnalysisFilesCreateTicketOutput.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getAllCollections(obj, varargin)
            % List all collections.
            % filter (char):The filter to apply. (e.g. label=my-label,created>2018-09-22)
            % sort (char):The sort fields and order. (e.g. label:asc,created:desc)
            % limit (integer):The maximum number of entries to return.
            % skip (integer):The number of entries to skip.
            % page (integer):The page number (i.e. skip limit*page entries)
            % afterId (char):Paginate after the given id. (Cannot be used with sort, page or skip)
            % returns: [vector[Collection], resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addParameter(x__inp, 'filter', []);
            addParameter(x__inp, 'sort', []);
            addParameter(x__inp, 'limit', []);
            addParameter(x__inp, 'skip', []);
            addParameter(x__inp, 'page', []);
            addParameter(x__inp, 'afterId', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, varargin{:});

            % Path parameters
            pathParams = {};

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.filter)
                queryParams = [queryParams, 'filter', flywheel.ApiClient.castParam(x__inp.Results.filter, 'char')];
            end
            if ~isempty(x__inp.Results.sort)
                queryParams = [queryParams, 'sort', flywheel.ApiClient.castParam(x__inp.Results.sort, 'char')];
            end
            if ~isempty(x__inp.Results.limit)
                queryParams = [queryParams, 'limit', flywheel.ApiClient.castParam(x__inp.Results.limit, 'integer')];
            end
            if ~isempty(x__inp.Results.skip)
                queryParams = [queryParams, 'skip', flywheel.ApiClient.castParam(x__inp.Results.skip, 'integer')];
            end
            if ~isempty(x__inp.Results.page)
                queryParams = [queryParams, 'page', flywheel.ApiClient.castParam(x__inp.Results.page, 'integer')];
            end
            if ~isempty(x__inp.Results.afterId)
                queryParams = [queryParams, 'after_id', flywheel.ApiClient.castParam(x__inp.Results.afterId, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/collections', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.ModelBase.cellmap(@(x) flywheel.model.Collection.fromJson(x, obj.context_), json);
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getAllCollectionsCurators(obj, varargin)
            % List all curators of collections
            % returns: [vector[containers.Map], resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, varargin{:});

            % Path parameters
            pathParams = {};

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/collections/curators', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.ModelBase.cellmap(@(x) flywheel.model.containers.Map.fromJson(x, obj.context_), json);
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getCollection(obj, collectionId, varargin)
            % Retrieve a single collection
            % collectionId (char)
            % returns: [Collection, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/collections/{CollectionId}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.Collection.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getCollectionAcquisitions(obj, collectionId, varargin)
            % List acquisitions in a collection
            % collectionId (char)
            % session (char):The id of a session, to which the acquisitions returned will be restricted
            % returns: [vector[Acquisition], resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addParameter(x__inp, 'session', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.session)
                queryParams = [queryParams, 'session', flywheel.ApiClient.castParam(x__inp.Results.session, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/collections/{CollectionId}/acquisitions', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.ModelBase.cellmap(@(x) flywheel.model.Acquisition.fromJson(x, obj.context_), json);
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getCollectionAnalyses(obj, collectionId, varargin)
            % Get analyses for collection.
            % collectionId (char)
            % filter (char):The filter to apply. (e.g. label=my-label,created>2018-09-22)
            % sort (char):The sort fields and order. (e.g. label:asc,created:desc)
            % limit (integer):The maximum number of entries to return.
            % skip (integer):The number of entries to skip.
            % page (integer):The page number (i.e. skip limit*page entries)
            % afterId (char):Paginate after the given id. (Cannot be used with sort, page or skip)
            % returns: [vector[AnalysisListEntry], resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addParameter(x__inp, 'filter', []);
            addParameter(x__inp, 'sort', []);
            addParameter(x__inp, 'limit', []);
            addParameter(x__inp, 'skip', []);
            addParameter(x__inp, 'page', []);
            addParameter(x__inp, 'afterId', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.filter)
                queryParams = [queryParams, 'filter', flywheel.ApiClient.castParam(x__inp.Results.filter, 'char')];
            end
            if ~isempty(x__inp.Results.sort)
                queryParams = [queryParams, 'sort', flywheel.ApiClient.castParam(x__inp.Results.sort, 'char')];
            end
            if ~isempty(x__inp.Results.limit)
                queryParams = [queryParams, 'limit', flywheel.ApiClient.castParam(x__inp.Results.limit, 'integer')];
            end
            if ~isempty(x__inp.Results.skip)
                queryParams = [queryParams, 'skip', flywheel.ApiClient.castParam(x__inp.Results.skip, 'integer')];
            end
            if ~isempty(x__inp.Results.page)
                queryParams = [queryParams, 'page', flywheel.ApiClient.castParam(x__inp.Results.page, 'integer')];
            end
            if ~isempty(x__inp.Results.afterId)
                queryParams = [queryParams, 'after_id', flywheel.ApiClient.castParam(x__inp.Results.afterId, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/collections/{CollectionId}/analyses', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.ModelBase.cellmap(@(x) flywheel.model.AnalysisListEntry.fromJson(x, obj.context_), json);
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getCollectionAnalysis(obj, collectionId, analysisId, varargin)
            % Get an analysis.
            % collectionId (char)
            % analysisId (char)
            % inflateJob (logical):Return job as an object instead of an id
            % returns: [AnalysisOutput, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'analysisId');
            addParameter(x__inp, 'inflateJob', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, analysisId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end
            if ~isempty(x__inp.Results.analysisId)
                pathParams = [pathParams, 'AnalysisId', x__inp.Results.analysisId];
            end

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.inflateJob)
                queryParams = [queryParams, 'inflate_job', flywheel.ApiClient.castParam(x__inp.Results.inflateJob, 'logical')];
            else
                queryParams = [queryParams, 'inflate_job', 'true'];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/collections/{CollectionId}/analyses/{AnalysisId}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.AnalysisOutput.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getCollectionFileInfo(obj, collectionId, fileName, varargin)
            % Get info for a particular file.
            % collectionId (char)
            % fileName (char)
            % returns: [FileEntry, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'fileName');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, fileName, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end
            if ~isempty(x__inp.Results.fileName)
                pathParams = [pathParams, 'FileName', x__inp.Results.fileName];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/collections/{CollectionId}/files/{FileName}/info', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.FileEntry.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getCollectionNote(obj, collectionId, noteId, varargin)
            % Get a note on collection.
            % collectionId (char)
            % noteId (char)
            % returns: [Note, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'noteId');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, noteId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end
            if ~isempty(x__inp.Results.noteId)
                pathParams = [pathParams, 'NoteId', x__inp.Results.noteId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/collections/{CollectionId}/notes/{NoteId}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.Note.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getCollectionSessions(obj, collectionId, varargin)
            % List sessions in a collection
            % collectionId (char)
            % filter (char):The filter to apply. (e.g. label=my-label,created>2018-09-22)
            % sort (char):The sort fields and order. (e.g. label:asc,created:desc)
            % limit (integer):The maximum number of entries to return.
            % skip (integer):The number of entries to skip.
            % page (integer):The page number (i.e. skip limit*page entries)
            % afterId (char):Paginate after the given id. (Cannot be used with sort, page or skip)
            % returns: [vector[Session], resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addParameter(x__inp, 'filter', []);
            addParameter(x__inp, 'sort', []);
            addParameter(x__inp, 'limit', []);
            addParameter(x__inp, 'skip', []);
            addParameter(x__inp, 'page', []);
            addParameter(x__inp, 'afterId', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.filter)
                queryParams = [queryParams, 'filter', flywheel.ApiClient.castParam(x__inp.Results.filter, 'char')];
            end
            if ~isempty(x__inp.Results.sort)
                queryParams = [queryParams, 'sort', flywheel.ApiClient.castParam(x__inp.Results.sort, 'char')];
            end
            if ~isempty(x__inp.Results.limit)
                queryParams = [queryParams, 'limit', flywheel.ApiClient.castParam(x__inp.Results.limit, 'integer')];
            end
            if ~isempty(x__inp.Results.skip)
                queryParams = [queryParams, 'skip', flywheel.ApiClient.castParam(x__inp.Results.skip, 'integer')];
            end
            if ~isempty(x__inp.Results.page)
                queryParams = [queryParams, 'page', flywheel.ApiClient.castParam(x__inp.Results.page, 'integer')];
            end
            if ~isempty(x__inp.Results.afterId)
                queryParams = [queryParams, 'after_id', flywheel.ApiClient.castParam(x__inp.Results.afterId, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/collections/{CollectionId}/sessions', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.ModelBase.cellmap(@(x) flywheel.model.Session.fromJson(x, obj.context_), json);
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getCollectionTag(obj, collectionId, tagValue, varargin)
            % Get the value of a tag, by name.
            % collectionId (char)
            % tagValue (char):The tag to interact with
            % returns: [Tag, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'tagValue');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, tagValue, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end
            if ~isempty(x__inp.Results.tagValue)
                pathParams = [pathParams, 'TagValue', x__inp.Results.tagValue];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/collections/{CollectionId}/tags/{TagValue}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.Tag.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getCollectionUserPermission(obj, collectionId, userId, varargin)
            % List a user's permissions for this collection.
            % collectionId (char)
            % userId (char)
            % returns: [Permission, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'userId');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, userId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end
            if ~isempty(x__inp.Results.userId)
                pathParams = [pathParams, 'UserId', x__inp.Results.userId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/collections/{CollectionId}/permissions/{UserId}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.Permission.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = modifyCollection(obj, collectionId, body, varargin)
            % Update a collection and its contents
            % collectionId (char)
            % body (Collection)
            % returns: [none, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'body');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, body, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = flywheel.model.Collection.ensureIsInstance(x__inp.Results.body);
            body = flywheel.ApiClient.encodeJson(body.toJson());

            resp = obj.apiClient.callApi('PUT', '/collections/{CollectionId}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = modifyCollectionAnalysis(obj, collectionId, analysisId, body, varargin)
            % Modify an analysis.
            % collectionId (char)
            % analysisId (char)
            % body (AnalysisUpdate)
            % returns: [InlineResponse200, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'analysisId');
            addRequired(x__inp, 'body');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, analysisId, body, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end
            if ~isempty(x__inp.Results.analysisId)
                pathParams = [pathParams, 'AnalysisId', x__inp.Results.analysisId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = flywheel.model.AnalysisUpdate.ensureIsInstance(x__inp.Results.body);
            body = flywheel.ApiClient.encodeJson(body.toJson());

            resp = obj.apiClient.callApi('PUT', '/collections/{CollectionId}/analyses/{AnalysisId}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse200.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = modifyCollectionFile(obj, collectionId, fileName, body, varargin)
            % Modify a file's attributes
            % collectionId (char)
            % fileName (char)
            % body (FileEntry)
            % returns: [InlineResponse2004, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'fileName');
            addRequired(x__inp, 'body');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, fileName, body, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end
            if ~isempty(x__inp.Results.fileName)
                pathParams = [pathParams, 'FileName', x__inp.Results.fileName];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = flywheel.model.FileEntry.ensureIsInstance(x__inp.Results.body);
            body = flywheel.ApiClient.encodeJson(body.toJson());

            resp = obj.apiClient.callApi('PUT', '/collections/{CollectionId}/files/{FileName}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse2004.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = modifyCollectionFileClassification(obj, collectionId, fileName, body, varargin)
            % Update classification for a particular file.
            % collectionId (char)
            % fileName (char)
            % body (ClassificationUpdateInput)
            % returns: [InlineResponse2004, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'fileName');
            addRequired(x__inp, 'body');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, fileName, body, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end
            if ~isempty(x__inp.Results.fileName)
                pathParams = [pathParams, 'FileName', x__inp.Results.fileName];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = flywheel.model.ClassificationUpdateInput.ensureIsInstance(x__inp.Results.body);
            body = flywheel.ApiClient.encodeJson(body.toJson());

            resp = obj.apiClient.callApi('POST', '/collections/{CollectionId}/files/{FileName}/classification', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse2004.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = modifyCollectionFileInfo(obj, collectionId, fileName, body, varargin)
            % Update info for a particular file.
            % collectionId (char)
            % fileName (char)
            % body (InfoUpdateInput)
            % returns: [InlineResponse200, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'fileName');
            addRequired(x__inp, 'body');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, fileName, body, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end
            if ~isempty(x__inp.Results.fileName)
                pathParams = [pathParams, 'FileName', x__inp.Results.fileName];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = flywheel.model.InfoUpdateInput.ensureIsInstance(x__inp.Results.body);
            body = flywheel.ApiClient.encodeJson(body.toJson());

            resp = obj.apiClient.callApi('POST', '/collections/{CollectionId}/files/{FileName}/info', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse200.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = modifyCollectionInfo(obj, collectionId, body, varargin)
            % Update or replace info for a collection.
            % collectionId (char)
            % body (InfoUpdateInput)
            % returns: [none, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'body');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, body, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = flywheel.model.InfoUpdateInput.ensureIsInstance(x__inp.Results.body);
            body = flywheel.ApiClient.encodeJson(body.toJson());

            resp = obj.apiClient.callApi('POST', '/collections/{CollectionId}/info', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = modifyCollectionNote(obj, collectionId, noteId, body, varargin)
            % Update a note on collection.
            % collectionId (char)
            % noteId (char)
            % body (Note)
            % returns: [InlineResponse200, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'noteId');
            addRequired(x__inp, 'body');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, noteId, body, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end
            if ~isempty(x__inp.Results.noteId)
                pathParams = [pathParams, 'NoteId', x__inp.Results.noteId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = flywheel.model.Note.ensureIsInstance(x__inp.Results.body);
            body = flywheel.ApiClient.encodeJson(body.toJson());

            resp = obj.apiClient.callApi('PUT', '/collections/{CollectionId}/notes/{NoteId}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse200.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = modifyCollectionUserPermission(obj, collectionId, userId, body, varargin)
            % Update a user's permission for this collection.
            % collectionId (char)
            % userId (char)
            % body (Permission)
            % returns: [InlineResponse200, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'userId');
            addRequired(x__inp, 'body');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, userId, body, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end
            if ~isempty(x__inp.Results.userId)
                pathParams = [pathParams, 'UserId', x__inp.Results.userId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = flywheel.model.Permission.ensureIsInstance(x__inp.Results.body);
            body = flywheel.ApiClient.encodeJson(body.toJson());

            resp = obj.apiClient.callApi('PUT', '/collections/{CollectionId}/permissions/{UserId}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse200.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = renameCollectionTag(obj, collectionId, tagValue, body, varargin)
            % Rename a tag.
            % collectionId (char)
            % tagValue (char):The tag to interact with
            % body (Tag)
            % returns: [InlineResponse200, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'tagValue');
            addRequired(x__inp, 'body');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, tagValue, body, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end
            if ~isempty(x__inp.Results.tagValue)
                pathParams = [pathParams, 'TagValue', x__inp.Results.tagValue];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = flywheel.model.Tag.ensureIsInstance(x__inp.Results.body);
            body = flywheel.ApiClient.encodeJson(body.toJson());

            resp = obj.apiClient.callApi('PUT', '/collections/{CollectionId}/tags/{TagValue}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse200.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = replaceCollectionFile(obj, collectionId, fileName, varargin)
            % Replace a file
            % collectionId (char)
            % fileName (char)
            % returns: [none, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'fileName');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, fileName, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end
            if ~isempty(x__inp.Results.fileName)
                pathParams = [pathParams, 'FileName', x__inp.Results.fileName];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('POST', '/collections/{CollectionId}/files/{FileName}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = uploadFileToCollection(obj, collectionId, file, varargin)
            % Upload a file to collection.
            % collectionId (char)
            % file (char):The file to upload
            % metadata (char):File metadata
            % returns: [none, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'file');
            addParameter(x__inp, 'metadata', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, file, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};
            if ~isempty(x__inp.Results.file)
                files = [files, flywheel.FileSpec.parametrize(x__inp.Results.file)];
            end
            if ~isempty(x__inp.Results.metadata)
                formParams = [formParams, 'metadata', x__inp.Results.metadata];
            end

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('POST', '/collections/{CollectionId}/files', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = uploadOutputToCollectionAnalysis(obj, collectionId, analysisId, file, varargin)
            % Upload an output file to analysis.
            % collectionId (char)
            % analysisId (char)
            % file (char):The file to upload
            % returns: [none, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'collectionId');
            addRequired(x__inp, 'analysisId');
            addRequired(x__inp, 'file');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, collectionId, analysisId, file, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.collectionId)
                pathParams = [pathParams, 'CollectionId', x__inp.Results.collectionId];
            end
            if ~isempty(x__inp.Results.analysisId)
                pathParams = [pathParams, 'AnalysisId', x__inp.Results.analysisId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};
            if ~isempty(x__inp.Results.file)
                files = [files, flywheel.FileSpec.parametrize(x__inp.Results.file)];
            end

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('POST', '/collections/{CollectionId}/analyses/{AnalysisId}/files', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                otherwise
                    returnData = [];
            end
        end

    end
end
