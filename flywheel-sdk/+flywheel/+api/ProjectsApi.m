% ProjectsApi - Project operations
%
% ProjectsApi Properties:
%    apiClient - ApiClient instance
%
% ProjectsApi Methods
%    addProject                             - Create a new project
%    addProjectAnalysis                     - Create an analysis and upload files.
%    addProjectAnalysisNote                 - Add a note to project analysis.
%    addProjectNote                         - Add a note to project.
%    addProjectPermission                   - Add a permission
%    addProjectRule                         - Create a new rule for a project.
%    addProjectTag                          - Add a tag to project.
%    deleteProject                          - Delete a project
%    deleteProjectAnalysis                  - Delete an anaylsis
%    deleteProjectAnalysisNote              - Remove a note from project analysis.
%    deleteProjectFile                      - Delete a file
%    deleteProjectNote                      - Remove a note from project
%    deleteProjectTag                       - Delete a tag
%    deleteProjectUserPermission            - Delete a permission
%    downloadFileFromProject                - Download a file.
%    getProjectFileZipInfo                  - Download a file.
%    getProjectDownloadTicket               - Download a file.
%    downloadInputFromProjectAnalysis       - Download analysis inputs with filter.
%    getProjectAnalysisInputZipInfo         - Download analysis inputs with filter.
%    getProjectAnalysisInputDownloadTicket  - Download analysis inputs with filter.
%    downloadOutputFromProjectAnalysis      - Download analysis outputs with filter.
%    getProjectAnalysisOutputZipInfo        - Download analysis outputs with filter.
%    getProjectAnalysisOutputDownloadTicket - Download analysis outputs with filter.
%    downloadProjectAnalysisInputs          - Download analysis inputs.
%    downloadProjectAnalysisOutputs         - Download analysis outputs.
%    endProjectPackfileUpload               - End a packfile upload
%    getAllProjects                         - Get a list of projects
%    getAllProjectsGroups                   - List all groups which have a project in them
%    getProject                             - Get a single project
%    getProjectAcquisitions                 - List all acquisitions for the given project.
%    getProjectAnalyses                     - Get analyses for project.
%    getProjectAnalysis                     - Get an analysis.
%    getProjectFileInfo                     - Get info for a particular file.
%    getProjectNote                         - Get a note on project.
%    getProjectRule                         - Get a project rule.
%    getProjectRules                        - List all rules for a project.
%    getProjectSessions                     - List all sessions for the given project.
%    getProjectSubjects                     - List all subjects for the given project.
%    getProjectTag                          - Get the value of a tag, by name.
%    getProjectUserPermission               - List a user's permissions for this project.
%    modifyProject                          - Update a project
%    modifyProjectAnalysis                  - Modify an analysis.
%    modifyProjectFile                      - Modify a file's attributes
%    modifyProjectFileClassification        - Update classification for a particular file.
%    modifyProjectFileInfo                  - Update info for a particular file.
%    modifyProjectInfo                      - Update or replace info for a project.
%    modifyProjectNote                      - Update a note on project.
%    modifyProjectRule                      - Update a rule on a project.
%    modifyProjectUserPermission            - Update a user's permission for this project.
%    projectPackfileUpload                  - Add files to an in-progress packfile
%    recalcAllProjects                      - Recalculate all sessions against their project templates.
%    recalcProject                          - Recalculate if sessions in the project satisfy the template.
%    removeProjectRule                      - Remove a project rule.
%    removeProjectTemplate                  - Remove the session template for a project.
%    renameProjectTag                       - Rename a tag.
%    replaceProjectFile                     - Replace a file
%    setProjectTemplate                     - Set the session template for a project.
%    startProjectPackfileUpload             - Start a packfile upload to project
%    uploadFileToProject                    - Upload a file to project.
%    uploadOutputToProjectAnalysis          - Upload an output file to analysis.
classdef ProjectsApi < handle
    % NOTE: This file is auto generated by the swagger code generator program.
    % Do not edit the file manually.
    properties
        apiClient
        context_
    end
    methods
        function obj = ProjectsApi(apiClient, context)
            obj.apiClient = apiClient;
            obj.context_ = context;
        end

        function [returnData, resp] = addProject(obj, body, varargin)
            % Create a new project
            % body (Project)
            % returns: [ContainerNewOutput, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'body');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, body, varargin{:});

            % Path parameters
            pathParams = {};

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = flywheel.model.Project.ensureIsInstance(x__inp.Results.body);
            body = flywheel.ApiClient.encodeJson(body.toJson());

            resp = obj.apiClient.callApi('POST', '/projects', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.ContainerNewOutput.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = addProjectAnalysis(obj, projectId, body, varargin)
            % Create an analysis and upload files.
            % projectId (char)
            % body (AnalysisInput)
            % job (logical):Return job as an object instead of an id
            % returns: [ContainerNewOutput, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'body');
            addParameter(x__inp, 'job', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, body, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.job)
                queryParams = [queryParams, 'job', flywheel.ApiClient.castParam(x__inp.Results.job, 'logical')];
            else
                queryParams = [queryParams, 'job', 'true'];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = flywheel.model.AnalysisInput.ensureIsInstance(x__inp.Results.body);
            body = flywheel.ApiClient.encodeJson(body.toJson());

            resp = obj.apiClient.callApi('POST', '/projects/{ProjectId}/analyses', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.ContainerNewOutput.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = addProjectAnalysisNote(obj, projectId, analysisId, body, varargin)
            % Add a note to project analysis.
            % projectId (char)
            % analysisId (char)
            % body (Note)
            % returns: [InlineResponse200, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'analysisId');
            addRequired(x__inp, 'body');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, analysisId, body, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end
            if ~isempty(x__inp.Results.analysisId)
                pathParams = [pathParams, 'AnalysisId', x__inp.Results.analysisId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = flywheel.model.Note.ensureIsInstance(x__inp.Results.body);
            body = flywheel.ApiClient.encodeJson(body.toJson());

            resp = obj.apiClient.callApi('POST', '/projects/{ProjectId}/analyses/{AnalysisId}/notes', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse200.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = addProjectNote(obj, projectId, body, varargin)
            % Add a note to project.
            % projectId (char)
            % body (Note)
            % returns: [InlineResponse200, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'body');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, body, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = flywheel.model.Note.ensureIsInstance(x__inp.Results.body);
            body = flywheel.ApiClient.encodeJson(body.toJson());

            resp = obj.apiClient.callApi('POST', '/projects/{ProjectId}/notes', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse200.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = addProjectPermission(obj, projectId, body, varargin)
            % Add a permission
            % projectId (char)
            % body (Permission)
            % returns: [InlineResponse200, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'body');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, body, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = flywheel.model.Permission.ensureIsInstance(x__inp.Results.body);
            body = flywheel.ApiClient.encodeJson(body.toJson());

            resp = obj.apiClient.callApi('POST', '/projects/{ProjectId}/permissions', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse200.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = addProjectRule(obj, projectId, body, varargin)
            % Create a new rule for a project.
            % projectId (char)
            % body (Rule)
            % returns: [none, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'body');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, body, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = flywheel.model.Rule.ensureIsInstance(x__inp.Results.body);
            body = flywheel.ApiClient.encodeJson(body.toJson());

            resp = obj.apiClient.callApi('POST', '/projects/{ProjectId}/rules', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = addProjectTag(obj, projectId, body, varargin)
            % Add a tag to project.
            % projectId (char)
            % body (Tag)
            % returns: [InlineResponse200, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'body');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, body, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = flywheel.model.Tag.ensureIsInstance(x__inp.Results.body);
            body = flywheel.ApiClient.encodeJson(body.toJson());

            resp = obj.apiClient.callApi('POST', '/projects/{ProjectId}/tags', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse200.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = deleteProject(obj, projectId, varargin)
            % Delete a project
            % projectId (char)
            % returns: [InlineResponse2002, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('DELETE', '/projects/{ProjectId}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse2002.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = deleteProjectAnalysis(obj, projectId, analysisId, varargin)
            % Delete an anaylsis
            % projectId (char)
            % analysisId (char)
            % returns: [InlineResponse2002, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'analysisId');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, analysisId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end
            if ~isempty(x__inp.Results.analysisId)
                pathParams = [pathParams, 'AnalysisId', x__inp.Results.analysisId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('DELETE', '/projects/{ProjectId}/analyses/{AnalysisId}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse2002.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = deleteProjectAnalysisNote(obj, projectId, analysisId, noteId, varargin)
            % Remove a note from project analysis.
            % projectId (char)
            % analysisId (char)
            % noteId (char)
            % returns: [InlineResponse200, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'analysisId');
            addRequired(x__inp, 'noteId');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, analysisId, noteId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end
            if ~isempty(x__inp.Results.analysisId)
                pathParams = [pathParams, 'AnalysisId', x__inp.Results.analysisId];
            end
            if ~isempty(x__inp.Results.noteId)
                pathParams = [pathParams, 'NoteId', x__inp.Results.noteId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('DELETE', '/projects/{ProjectId}/analyses/{AnalysisId}/notes/{NoteId}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse200.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = deleteProjectFile(obj, projectId, fileName, varargin)
            % Delete a file
            % projectId (char)
            % fileName (char)
            % returns: [InlineResponse200, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'fileName');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, fileName, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end
            if ~isempty(x__inp.Results.fileName)
                pathParams = [pathParams, 'FileName', x__inp.Results.fileName];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('DELETE', '/projects/{ProjectId}/files/{FileName}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse200.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = deleteProjectNote(obj, projectId, noteId, varargin)
            % Remove a note from project
            % projectId (char)
            % noteId (char)
            % returns: [InlineResponse200, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'noteId');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, noteId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end
            if ~isempty(x__inp.Results.noteId)
                pathParams = [pathParams, 'NoteId', x__inp.Results.noteId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('DELETE', '/projects/{ProjectId}/notes/{NoteId}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse200.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = deleteProjectTag(obj, projectId, tagValue, varargin)
            % Delete a tag
            % projectId (char)
            % tagValue (char):The tag to interact with
            % returns: [InlineResponse200, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'tagValue');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, tagValue, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end
            if ~isempty(x__inp.Results.tagValue)
                pathParams = [pathParams, 'TagValue', x__inp.Results.tagValue];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('DELETE', '/projects/{ProjectId}/tags/{TagValue}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse200.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = deleteProjectUserPermission(obj, projectId, userId, varargin)
            % Delete a permission
            % projectId (char)
            % userId (char)
            % returns: [InlineResponse200, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'userId');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, userId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end
            if ~isempty(x__inp.Results.userId)
                pathParams = [pathParams, 'UserId', x__inp.Results.userId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('DELETE', '/projects/{ProjectId}/permissions/{UserId}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse200.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = downloadFileFromProject(obj, projectId, fileName, varargin)
            % Download a file.
            % projectId (char)
            % fileName (char)
            % view (logical):If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
            % info (logical):If the file is a zipfile, return a json response of zipfile member information
            % member (char):The filename of a zipfile member to download rather than the entire file
            % signature (char):Url's signature (signed download url)
            % expires (char):Signed url expiration time (epoch time)
            % destFile - Destination file path
            % returns: [DownloadTicket, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'fileName');
            addParameter(x__inp, 'view', []);
            addParameter(x__inp, 'info', []);
            addParameter(x__inp, 'member', []);
            addParameter(x__inp, 'signature', []);
            addParameter(x__inp, 'expires', []);
            addRequired(x__inp, 'destFile');
            addParameter(x__inp, 'OutputType', 'double');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, fileName, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end
            if ~isempty(x__inp.Results.fileName)
                pathParams = [pathParams, 'FileName', x__inp.Results.fileName];
            end

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.view)
                queryParams = [queryParams, 'view', flywheel.ApiClient.castParam(x__inp.Results.view, 'logical')];
            end
            if ~isempty(x__inp.Results.info)
                queryParams = [queryParams, 'info', flywheel.ApiClient.castParam(x__inp.Results.info, 'logical')];
            end
            if ~isempty(x__inp.Results.member)
                queryParams = [queryParams, 'member', flywheel.ApiClient.castParam(x__inp.Results.member, 'char')];
            end
            if ~isempty(x__inp.Results.signature)
                queryParams = [queryParams, 'signature', flywheel.ApiClient.castParam(x__inp.Results.signature, 'char')];
            end
            if ~isempty(x__inp.Results.expires)
                queryParams = [queryParams, 'expires', flywheel.ApiClient.castParam(x__inp.Results.expires, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/projects/{ProjectId}/files/{FileName}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    destFile = x__inp.Results.destFile;
                    if ~isempty(destFile)
                        resp.saveResponseBodyToFile(destFile);
                        returnData = destFile;
                    else
                        returnData = resp.getBodyData(x__inp.Results.OutputType);
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getProjectFileZipInfo(obj, projectId, fileName, varargin)
            % Download a file.
            % projectId (char)
            % fileName (char)
            % ticket (char):The generated ticket id for the download, or present but empty to generate a ticket id
            % view (logical):If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
            % info (logical):If the file is a zipfile, return a json response of zipfile member information
            % member (char):The filename of a zipfile member to download rather than the entire file
            % signature (char):Url's signature (signed download url)
            % expires (char):Signed url expiration time (epoch time)
            % returns: [FileZipInfo, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'fileName');
            addParameter(x__inp, 'ticket', []);
            addParameter(x__inp, 'view', []);
            addParameter(x__inp, 'info', []);
            addParameter(x__inp, 'member', []);
            addParameter(x__inp, 'signature', []);
            addParameter(x__inp, 'expires', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, fileName, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end
            if ~isempty(x__inp.Results.fileName)
                pathParams = [pathParams, 'FileName', x__inp.Results.fileName];
            end

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.ticket)
                queryParams = [queryParams, 'ticket', flywheel.ApiClient.castParam(x__inp.Results.ticket, 'char')];
            end
            if ~isempty(x__inp.Results.view)
                queryParams = [queryParams, 'view', flywheel.ApiClient.castParam(x__inp.Results.view, 'logical')];
            end
            if ~isempty(x__inp.Results.info)
                queryParams = [queryParams, 'info', flywheel.ApiClient.castParam(x__inp.Results.info, 'logical')];
            else
                queryParams = [queryParams, 'info', 'true'];
            end
            if ~isempty(x__inp.Results.member)
                queryParams = [queryParams, 'member', flywheel.ApiClient.castParam(x__inp.Results.member, 'char')];
            end
            if ~isempty(x__inp.Results.signature)
                queryParams = [queryParams, 'signature', flywheel.ApiClient.castParam(x__inp.Results.signature, 'char')];
            end
            if ~isempty(x__inp.Results.expires)
                queryParams = [queryParams, 'expires', flywheel.ApiClient.castParam(x__inp.Results.expires, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/projects/{ProjectId}/files/{FileName}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.FileZipInfo.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getProjectDownloadTicket(obj, projectId, fileName, varargin)
            % Download a file.
            % projectId (char)
            % fileName (char)
            % ticket (char):The generated ticket id for the download, or present but empty to generate a ticket id
            % view (logical):If true, the proper \"Content-Type\" header based on the file's mimetype is set on response If false, the \"Content-Type\" header is set to \"application/octet-stream\" 
            % info (logical):If the file is a zipfile, return a json response of zipfile member information
            % member (char):The filename of a zipfile member to download rather than the entire file
            % signature (char):Url's signature (signed download url)
            % expires (char):Signed url expiration time (epoch time)
            % returns: [DownloadTicket, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'fileName');
            addParameter(x__inp, 'ticket', []);
            addParameter(x__inp, 'view', []);
            addParameter(x__inp, 'info', []);
            addParameter(x__inp, 'member', []);
            addParameter(x__inp, 'signature', []);
            addParameter(x__inp, 'expires', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, fileName, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end
            if ~isempty(x__inp.Results.fileName)
                pathParams = [pathParams, 'FileName', x__inp.Results.fileName];
            end

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.ticket)
                queryParams = [queryParams, 'ticket', flywheel.ApiClient.castParam(x__inp.Results.ticket, 'char')];
            end
            if ~isempty(x__inp.Results.view)
                queryParams = [queryParams, 'view', flywheel.ApiClient.castParam(x__inp.Results.view, 'logical')];
            end
            if ~isempty(x__inp.Results.info)
                queryParams = [queryParams, 'info', flywheel.ApiClient.castParam(x__inp.Results.info, 'logical')];
            end
            if ~isempty(x__inp.Results.member)
                queryParams = [queryParams, 'member', flywheel.ApiClient.castParam(x__inp.Results.member, 'char')];
            end
            if ~isempty(x__inp.Results.signature)
                queryParams = [queryParams, 'signature', flywheel.ApiClient.castParam(x__inp.Results.signature, 'char')];
            end
            if ~isempty(x__inp.Results.expires)
                queryParams = [queryParams, 'expires', flywheel.ApiClient.castParam(x__inp.Results.expires, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/projects/{ProjectId}/files/{FileName}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.DownloadTicket.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = downloadInputFromProjectAnalysis(obj, projectId, analysisId, filename, varargin)
            % Download analysis inputs with filter.
            % projectId (char)
            % analysisId (char)
            % filename (char):filename to download (get tar of all if empty)
            % info (logical):If the file is a zipfile, return a json response of zipfile member information
            % member (char):The filename of a zipfile member to download rather than the entire file
            % destFile - Destination file path
            % returns: [AnalysisFilesCreateTicketOutput, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'analysisId');
            addRequired(x__inp, 'filename');
            addParameter(x__inp, 'info', []);
            addParameter(x__inp, 'member', []);
            addRequired(x__inp, 'destFile');
            addParameter(x__inp, 'OutputType', 'double');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, analysisId, filename, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end
            if ~isempty(x__inp.Results.analysisId)
                pathParams = [pathParams, 'AnalysisId', x__inp.Results.analysisId];
            end
            if ~isempty(x__inp.Results.filename)
                pathParams = [pathParams, 'Filename', x__inp.Results.filename];
            end

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.info)
                queryParams = [queryParams, 'info', flywheel.ApiClient.castParam(x__inp.Results.info, 'logical')];
            end
            if ~isempty(x__inp.Results.member)
                queryParams = [queryParams, 'member', flywheel.ApiClient.castParam(x__inp.Results.member, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/projects/{ProjectId}/analyses/{AnalysisId}/inputs/{Filename}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    destFile = x__inp.Results.destFile;
                    if ~isempty(destFile)
                        resp.saveResponseBodyToFile(destFile);
                        returnData = destFile;
                    else
                        returnData = resp.getBodyData(x__inp.Results.OutputType);
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getProjectAnalysisInputZipInfo(obj, projectId, analysisId, filename, varargin)
            % Download analysis inputs with filter.
            % projectId (char)
            % analysisId (char)
            % filename (char):filename to download (get tar of all if empty)
            % ticket (char):ticket id of the inputs to download
            % info (logical):If the file is a zipfile, return a json response of zipfile member information
            % member (char):The filename of a zipfile member to download rather than the entire file
            % returns: [FileZipInfo, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'analysisId');
            addRequired(x__inp, 'filename');
            addParameter(x__inp, 'ticket', []);
            addParameter(x__inp, 'info', []);
            addParameter(x__inp, 'member', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, analysisId, filename, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end
            if ~isempty(x__inp.Results.analysisId)
                pathParams = [pathParams, 'AnalysisId', x__inp.Results.analysisId];
            end
            if ~isempty(x__inp.Results.filename)
                pathParams = [pathParams, 'Filename', x__inp.Results.filename];
            end

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.ticket)
                queryParams = [queryParams, 'ticket', flywheel.ApiClient.castParam(x__inp.Results.ticket, 'char')];
            end
            if ~isempty(x__inp.Results.info)
                queryParams = [queryParams, 'info', flywheel.ApiClient.castParam(x__inp.Results.info, 'logical')];
            else
                queryParams = [queryParams, 'info', 'true'];
            end
            if ~isempty(x__inp.Results.member)
                queryParams = [queryParams, 'member', flywheel.ApiClient.castParam(x__inp.Results.member, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/projects/{ProjectId}/analyses/{AnalysisId}/inputs/{Filename}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.FileZipInfo.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getProjectAnalysisInputDownloadTicket(obj, projectId, analysisId, filename, varargin)
            % Download analysis inputs with filter.
            % projectId (char)
            % analysisId (char)
            % filename (char):filename to download (get tar of all if empty)
            % ticket (char):ticket id of the inputs to download
            % info (logical):If the file is a zipfile, return a json response of zipfile member information
            % member (char):The filename of a zipfile member to download rather than the entire file
            % returns: [AnalysisFilesCreateTicketOutput, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'analysisId');
            addRequired(x__inp, 'filename');
            addParameter(x__inp, 'ticket', []);
            addParameter(x__inp, 'info', []);
            addParameter(x__inp, 'member', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, analysisId, filename, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end
            if ~isempty(x__inp.Results.analysisId)
                pathParams = [pathParams, 'AnalysisId', x__inp.Results.analysisId];
            end
            if ~isempty(x__inp.Results.filename)
                pathParams = [pathParams, 'Filename', x__inp.Results.filename];
            end

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.ticket)
                queryParams = [queryParams, 'ticket', flywheel.ApiClient.castParam(x__inp.Results.ticket, 'char')];
            end
            if ~isempty(x__inp.Results.info)
                queryParams = [queryParams, 'info', flywheel.ApiClient.castParam(x__inp.Results.info, 'logical')];
            end
            if ~isempty(x__inp.Results.member)
                queryParams = [queryParams, 'member', flywheel.ApiClient.castParam(x__inp.Results.member, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/projects/{ProjectId}/analyses/{AnalysisId}/inputs/{Filename}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.AnalysisFilesCreateTicketOutput.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = downloadOutputFromProjectAnalysis(obj, projectId, analysisId, filename, varargin)
            % Download analysis outputs with filter.
            % projectId (char)
            % analysisId (char)
            % filename (char):filename to download (get tar of all if empty)
            % info (logical):If the file is a zipfile, return a json response of zipfile member information
            % member (char):The filename of a zipfile member to download rather than the entire file
            % destFile - Destination file path
            % returns: [AnalysisFilesCreateTicketOutput, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'analysisId');
            addRequired(x__inp, 'filename');
            addParameter(x__inp, 'info', []);
            addParameter(x__inp, 'member', []);
            addRequired(x__inp, 'destFile');
            addParameter(x__inp, 'OutputType', 'double');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, analysisId, filename, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end
            if ~isempty(x__inp.Results.analysisId)
                pathParams = [pathParams, 'AnalysisId', x__inp.Results.analysisId];
            end
            if ~isempty(x__inp.Results.filename)
                pathParams = [pathParams, 'Filename', x__inp.Results.filename];
            end

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.info)
                queryParams = [queryParams, 'info', flywheel.ApiClient.castParam(x__inp.Results.info, 'logical')];
            end
            if ~isempty(x__inp.Results.member)
                queryParams = [queryParams, 'member', flywheel.ApiClient.castParam(x__inp.Results.member, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/projects/{ProjectId}/analyses/{AnalysisId}/files/{Filename}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    destFile = x__inp.Results.destFile;
                    if ~isempty(destFile)
                        resp.saveResponseBodyToFile(destFile);
                        returnData = destFile;
                    else
                        returnData = resp.getBodyData(x__inp.Results.OutputType);
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getProjectAnalysisOutputZipInfo(obj, projectId, analysisId, filename, varargin)
            % Download analysis outputs with filter.
            % projectId (char)
            % analysisId (char)
            % filename (char):filename to download (get tar of all if empty)
            % ticket (char):ticket id of the outputs to download
            % info (logical):If the file is a zipfile, return a json response of zipfile member information
            % member (char):The filename of a zipfile member to download rather than the entire file
            % returns: [FileZipInfo, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'analysisId');
            addRequired(x__inp, 'filename');
            addParameter(x__inp, 'ticket', []);
            addParameter(x__inp, 'info', []);
            addParameter(x__inp, 'member', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, analysisId, filename, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end
            if ~isempty(x__inp.Results.analysisId)
                pathParams = [pathParams, 'AnalysisId', x__inp.Results.analysisId];
            end
            if ~isempty(x__inp.Results.filename)
                pathParams = [pathParams, 'Filename', x__inp.Results.filename];
            end

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.ticket)
                queryParams = [queryParams, 'ticket', flywheel.ApiClient.castParam(x__inp.Results.ticket, 'char')];
            end
            if ~isempty(x__inp.Results.info)
                queryParams = [queryParams, 'info', flywheel.ApiClient.castParam(x__inp.Results.info, 'logical')];
            else
                queryParams = [queryParams, 'info', 'true'];
            end
            if ~isempty(x__inp.Results.member)
                queryParams = [queryParams, 'member', flywheel.ApiClient.castParam(x__inp.Results.member, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/projects/{ProjectId}/analyses/{AnalysisId}/files/{Filename}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.FileZipInfo.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getProjectAnalysisOutputDownloadTicket(obj, projectId, analysisId, filename, varargin)
            % Download analysis outputs with filter.
            % projectId (char)
            % analysisId (char)
            % filename (char):filename to download (get tar of all if empty)
            % ticket (char):ticket id of the outputs to download
            % info (logical):If the file is a zipfile, return a json response of zipfile member information
            % member (char):The filename of a zipfile member to download rather than the entire file
            % returns: [AnalysisFilesCreateTicketOutput, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'analysisId');
            addRequired(x__inp, 'filename');
            addParameter(x__inp, 'ticket', []);
            addParameter(x__inp, 'info', []);
            addParameter(x__inp, 'member', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, analysisId, filename, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end
            if ~isempty(x__inp.Results.analysisId)
                pathParams = [pathParams, 'AnalysisId', x__inp.Results.analysisId];
            end
            if ~isempty(x__inp.Results.filename)
                pathParams = [pathParams, 'Filename', x__inp.Results.filename];
            end

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.ticket)
                queryParams = [queryParams, 'ticket', flywheel.ApiClient.castParam(x__inp.Results.ticket, 'char')];
            end
            if ~isempty(x__inp.Results.info)
                queryParams = [queryParams, 'info', flywheel.ApiClient.castParam(x__inp.Results.info, 'logical')];
            end
            if ~isempty(x__inp.Results.member)
                queryParams = [queryParams, 'member', flywheel.ApiClient.castParam(x__inp.Results.member, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/projects/{ProjectId}/analyses/{AnalysisId}/files/{Filename}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.AnalysisFilesCreateTicketOutput.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = downloadProjectAnalysisInputs(obj, projectId, analysisId, varargin)
            % Download analysis inputs.
            % projectId (char)
            % analysisId (char)
            % ticket (char):ticket id of the inputs to download
            % returns: [AnalysisFilesCreateTicketOutput, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'analysisId');
            addParameter(x__inp, 'ticket', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, analysisId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end
            if ~isempty(x__inp.Results.analysisId)
                pathParams = [pathParams, 'AnalysisId', x__inp.Results.analysisId];
            end

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.ticket)
                queryParams = [queryParams, 'ticket', flywheel.ApiClient.castParam(x__inp.Results.ticket, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/projects/{ProjectId}/analyses/{AnalysisId}/inputs', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.AnalysisFilesCreateTicketOutput.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = downloadProjectAnalysisOutputs(obj, projectId, analysisId, varargin)
            % Download analysis outputs.
            % projectId (char)
            % analysisId (char)
            % ticket (char):ticket id of the outputs to download
            % returns: [AnalysisFilesCreateTicketOutput, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'analysisId');
            addParameter(x__inp, 'ticket', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, analysisId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end
            if ~isempty(x__inp.Results.analysisId)
                pathParams = [pathParams, 'AnalysisId', x__inp.Results.analysisId];
            end

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.ticket)
                queryParams = [queryParams, 'ticket', flywheel.ApiClient.castParam(x__inp.Results.ticket, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/projects/{ProjectId}/analyses/{AnalysisId}/files', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.AnalysisFilesCreateTicketOutput.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = endProjectPackfileUpload(obj, projectId, token, metadata, varargin)
            % End a packfile upload
            % projectId (char)
            % token (char)
            % metadata (char):string-encoded metadata json object.
            % returns: [none, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'token');
            addRequired(x__inp, 'metadata');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, token, metadata, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.token)
                queryParams = [queryParams, 'token', flywheel.ApiClient.castParam(x__inp.Results.token, 'char')];
            end
            if ~isempty(x__inp.Results.metadata)
                queryParams = [queryParams, 'metadata', flywheel.ApiClient.castParam(x__inp.Results.metadata, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/projects/{ProjectId}/packfile-end', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getAllProjects(obj, varargin)
            % Get a list of projects
            % exhaustive (logical):Set to return a complete list regardless of permissions
            % filter (char):The filter to apply. (e.g. label=my-label,created>2018-09-22)
            % sort (char):The sort fields and order. (e.g. label:asc,created:desc)
            % limit (integer):The maximum number of entries to return.
            % skip (integer):The number of entries to skip.
            % page (integer):The page number (i.e. skip limit*page entries)
            % afterId (char):Paginate after the given id. (Cannot be used with sort, page or skip)
            % returns: [vector[Project], resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addParameter(x__inp, 'exhaustive', []);
            addParameter(x__inp, 'filter', []);
            addParameter(x__inp, 'sort', []);
            addParameter(x__inp, 'limit', []);
            addParameter(x__inp, 'skip', []);
            addParameter(x__inp, 'page', []);
            addParameter(x__inp, 'afterId', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, varargin{:});

            % Path parameters
            pathParams = {};

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.exhaustive)
                queryParams = [queryParams, 'exhaustive', flywheel.ApiClient.castParam(x__inp.Results.exhaustive, 'logical')];
            end
            if ~isempty(x__inp.Results.filter)
                queryParams = [queryParams, 'filter', flywheel.ApiClient.castParam(x__inp.Results.filter, 'char')];
            end
            if ~isempty(x__inp.Results.sort)
                queryParams = [queryParams, 'sort', flywheel.ApiClient.castParam(x__inp.Results.sort, 'char')];
            end
            if ~isempty(x__inp.Results.limit)
                queryParams = [queryParams, 'limit', flywheel.ApiClient.castParam(x__inp.Results.limit, 'integer')];
            else
                queryParams = [queryParams, 'limit', '1000'];
            end
            if ~isempty(x__inp.Results.skip)
                queryParams = [queryParams, 'skip', flywheel.ApiClient.castParam(x__inp.Results.skip, 'integer')];
            end
            if ~isempty(x__inp.Results.page)
                queryParams = [queryParams, 'page', flywheel.ApiClient.castParam(x__inp.Results.page, 'integer')];
            end
            if ~isempty(x__inp.Results.afterId)
                queryParams = [queryParams, 'after_id', flywheel.ApiClient.castParam(x__inp.Results.afterId, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/projects', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.ModelBase.cellmap(@(x) flywheel.model.Project.fromJson(x, obj.context_), json);
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getAllProjectsGroups(obj, varargin)
            % List all groups which have a project in them
            % returns: [vector[Group], resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, varargin{:});

            % Path parameters
            pathParams = {};

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/projects/groups', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.ModelBase.cellmap(@(x) flywheel.model.Group.fromJson(x, obj.context_), json);
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getProject(obj, projectId, varargin)
            % Get a single project
            % projectId (char)
            % returns: [Project, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/projects/{ProjectId}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.Project.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getProjectAcquisitions(obj, projectId, varargin)
            % List all acquisitions for the given project.
            % projectId (char)
            % filter (char):The filter to apply. (e.g. label=my-label,created>2018-09-22)
            % sort (char):The sort fields and order. (e.g. label:asc,created:desc)
            % limit (integer):The maximum number of entries to return.
            % skip (integer):The number of entries to skip.
            % page (integer):The page number (i.e. skip limit*page entries)
            % afterId (char):Paginate after the given id. (Cannot be used with sort, page or skip)
            % returns: [vector[Acquisition], resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addParameter(x__inp, 'filter', []);
            addParameter(x__inp, 'sort', []);
            addParameter(x__inp, 'limit', []);
            addParameter(x__inp, 'skip', []);
            addParameter(x__inp, 'page', []);
            addParameter(x__inp, 'afterId', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.filter)
                queryParams = [queryParams, 'filter', flywheel.ApiClient.castParam(x__inp.Results.filter, 'char')];
            end
            if ~isempty(x__inp.Results.sort)
                queryParams = [queryParams, 'sort', flywheel.ApiClient.castParam(x__inp.Results.sort, 'char')];
            end
            if ~isempty(x__inp.Results.limit)
                queryParams = [queryParams, 'limit', flywheel.ApiClient.castParam(x__inp.Results.limit, 'integer')];
            end
            if ~isempty(x__inp.Results.skip)
                queryParams = [queryParams, 'skip', flywheel.ApiClient.castParam(x__inp.Results.skip, 'integer')];
            end
            if ~isempty(x__inp.Results.page)
                queryParams = [queryParams, 'page', flywheel.ApiClient.castParam(x__inp.Results.page, 'integer')];
            end
            if ~isempty(x__inp.Results.afterId)
                queryParams = [queryParams, 'after_id', flywheel.ApiClient.castParam(x__inp.Results.afterId, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/projects/{ProjectId}/acquisitions', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.ModelBase.cellmap(@(x) flywheel.model.Acquisition.fromJson(x, obj.context_), json);
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getProjectAnalyses(obj, projectId, varargin)
            % Get analyses for project.
            % projectId (char)
            % filter (char):The filter to apply. (e.g. label=my-label,created>2018-09-22)
            % sort (char):The sort fields and order. (e.g. label:asc,created:desc)
            % limit (integer):The maximum number of entries to return.
            % skip (integer):The number of entries to skip.
            % page (integer):The page number (i.e. skip limit*page entries)
            % afterId (char):Paginate after the given id. (Cannot be used with sort, page or skip)
            % returns: [vector[AnalysisListEntry], resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addParameter(x__inp, 'filter', []);
            addParameter(x__inp, 'sort', []);
            addParameter(x__inp, 'limit', []);
            addParameter(x__inp, 'skip', []);
            addParameter(x__inp, 'page', []);
            addParameter(x__inp, 'afterId', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.filter)
                queryParams = [queryParams, 'filter', flywheel.ApiClient.castParam(x__inp.Results.filter, 'char')];
            end
            if ~isempty(x__inp.Results.sort)
                queryParams = [queryParams, 'sort', flywheel.ApiClient.castParam(x__inp.Results.sort, 'char')];
            end
            if ~isempty(x__inp.Results.limit)
                queryParams = [queryParams, 'limit', flywheel.ApiClient.castParam(x__inp.Results.limit, 'integer')];
            end
            if ~isempty(x__inp.Results.skip)
                queryParams = [queryParams, 'skip', flywheel.ApiClient.castParam(x__inp.Results.skip, 'integer')];
            end
            if ~isempty(x__inp.Results.page)
                queryParams = [queryParams, 'page', flywheel.ApiClient.castParam(x__inp.Results.page, 'integer')];
            end
            if ~isempty(x__inp.Results.afterId)
                queryParams = [queryParams, 'after_id', flywheel.ApiClient.castParam(x__inp.Results.afterId, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/projects/{ProjectId}/analyses', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.ModelBase.cellmap(@(x) flywheel.model.AnalysisListEntry.fromJson(x, obj.context_), json);
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getProjectAnalysis(obj, projectId, analysisId, varargin)
            % Get an analysis.
            % projectId (char)
            % analysisId (char)
            % inflateJob (logical):Return job as an object instead of an id
            % returns: [AnalysisOutput, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'analysisId');
            addParameter(x__inp, 'inflateJob', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, analysisId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end
            if ~isempty(x__inp.Results.analysisId)
                pathParams = [pathParams, 'AnalysisId', x__inp.Results.analysisId];
            end

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.inflateJob)
                queryParams = [queryParams, 'inflate_job', flywheel.ApiClient.castParam(x__inp.Results.inflateJob, 'logical')];
            else
                queryParams = [queryParams, 'inflate_job', 'true'];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/projects/{ProjectId}/analyses/{AnalysisId}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.AnalysisOutput.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getProjectFileInfo(obj, projectId, fileName, varargin)
            % Get info for a particular file.
            % projectId (char)
            % fileName (char)
            % returns: [FileEntry, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'fileName');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, fileName, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end
            if ~isempty(x__inp.Results.fileName)
                pathParams = [pathParams, 'FileName', x__inp.Results.fileName];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/projects/{ProjectId}/files/{FileName}/info', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.FileEntry.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getProjectNote(obj, projectId, noteId, varargin)
            % Get a note on project.
            % projectId (char)
            % noteId (char)
            % returns: [Note, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'noteId');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, noteId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end
            if ~isempty(x__inp.Results.noteId)
                pathParams = [pathParams, 'NoteId', x__inp.Results.noteId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/projects/{ProjectId}/notes/{NoteId}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.Note.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getProjectRule(obj, projectId, ruleId, varargin)
            % Get a project rule.
            % projectId (char)
            % ruleId (char)
            % returns: [Rule, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'ruleId');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, ruleId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end
            if ~isempty(x__inp.Results.ruleId)
                pathParams = [pathParams, 'RuleId', x__inp.Results.ruleId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/projects/{ProjectId}/rules/{RuleId}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.Rule.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getProjectRules(obj, projectId, varargin)
            % List all rules for a project.
            % projectId (char)
            % returns: [vector[Rule], resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/projects/{ProjectId}/rules', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.ModelBase.cellmap(@(x) flywheel.model.Rule.fromJson(x, obj.context_), json);
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getProjectSessions(obj, projectId, varargin)
            % List all sessions for the given project.
            % projectId (char)
            % filter (char):The filter to apply. (e.g. label=my-label,created>2018-09-22)
            % sort (char):The sort fields and order. (e.g. label:asc,created:desc)
            % limit (integer):The maximum number of entries to return.
            % skip (integer):The number of entries to skip.
            % page (integer):The page number (i.e. skip limit*page entries)
            % afterId (char):Paginate after the given id. (Cannot be used with sort, page or skip)
            % returns: [vector[Session], resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addParameter(x__inp, 'filter', []);
            addParameter(x__inp, 'sort', []);
            addParameter(x__inp, 'limit', []);
            addParameter(x__inp, 'skip', []);
            addParameter(x__inp, 'page', []);
            addParameter(x__inp, 'afterId', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.filter)
                queryParams = [queryParams, 'filter', flywheel.ApiClient.castParam(x__inp.Results.filter, 'char')];
            end
            if ~isempty(x__inp.Results.sort)
                queryParams = [queryParams, 'sort', flywheel.ApiClient.castParam(x__inp.Results.sort, 'char')];
            end
            if ~isempty(x__inp.Results.limit)
                queryParams = [queryParams, 'limit', flywheel.ApiClient.castParam(x__inp.Results.limit, 'integer')];
            end
            if ~isempty(x__inp.Results.skip)
                queryParams = [queryParams, 'skip', flywheel.ApiClient.castParam(x__inp.Results.skip, 'integer')];
            end
            if ~isempty(x__inp.Results.page)
                queryParams = [queryParams, 'page', flywheel.ApiClient.castParam(x__inp.Results.page, 'integer')];
            end
            if ~isempty(x__inp.Results.afterId)
                queryParams = [queryParams, 'after_id', flywheel.ApiClient.castParam(x__inp.Results.afterId, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/projects/{ProjectId}/sessions', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.ModelBase.cellmap(@(x) flywheel.model.Session.fromJson(x, obj.context_), json);
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getProjectSubjects(obj, projectId, varargin)
            % List all subjects for the given project.
            % projectId (char)
            % filter (char):The filter to apply. (e.g. label=my-label,created>2018-09-22)
            % sort (char):The sort fields and order. (e.g. label:asc,created:desc)
            % limit (integer):The maximum number of entries to return.
            % skip (integer):The number of entries to skip.
            % page (integer):The page number (i.e. skip limit*page entries)
            % afterId (char):Paginate after the given id. (Cannot be used with sort, page or skip)
            % returns: [vector[Subject], resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addParameter(x__inp, 'filter', []);
            addParameter(x__inp, 'sort', []);
            addParameter(x__inp, 'limit', []);
            addParameter(x__inp, 'skip', []);
            addParameter(x__inp, 'page', []);
            addParameter(x__inp, 'afterId', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.filter)
                queryParams = [queryParams, 'filter', flywheel.ApiClient.castParam(x__inp.Results.filter, 'char')];
            end
            if ~isempty(x__inp.Results.sort)
                queryParams = [queryParams, 'sort', flywheel.ApiClient.castParam(x__inp.Results.sort, 'char')];
            end
            if ~isempty(x__inp.Results.limit)
                queryParams = [queryParams, 'limit', flywheel.ApiClient.castParam(x__inp.Results.limit, 'integer')];
            end
            if ~isempty(x__inp.Results.skip)
                queryParams = [queryParams, 'skip', flywheel.ApiClient.castParam(x__inp.Results.skip, 'integer')];
            end
            if ~isempty(x__inp.Results.page)
                queryParams = [queryParams, 'page', flywheel.ApiClient.castParam(x__inp.Results.page, 'integer')];
            end
            if ~isempty(x__inp.Results.afterId)
                queryParams = [queryParams, 'after_id', flywheel.ApiClient.castParam(x__inp.Results.afterId, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/projects/{ProjectId}/subjects', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.ModelBase.cellmap(@(x) flywheel.model.Subject.fromJson(x, obj.context_), json);
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getProjectTag(obj, projectId, tagValue, varargin)
            % Get the value of a tag, by name.
            % projectId (char)
            % tagValue (char):The tag to interact with
            % returns: [Tag, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'tagValue');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, tagValue, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end
            if ~isempty(x__inp.Results.tagValue)
                pathParams = [pathParams, 'TagValue', x__inp.Results.tagValue];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/projects/{ProjectId}/tags/{TagValue}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.Tag.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = getProjectUserPermission(obj, projectId, userId, varargin)
            % List a user's permissions for this project.
            % projectId (char)
            % userId (char)
            % returns: [Permission, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'userId');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, userId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end
            if ~isempty(x__inp.Results.userId)
                pathParams = [pathParams, 'UserId', x__inp.Results.userId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('GET', '/projects/{ProjectId}/permissions/{UserId}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.Permission.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = modifyProject(obj, projectId, body, varargin)
            % Update a project
            % projectId (char)
            % body (Project)
            % returns: [InlineResponse200, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'body');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, body, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = flywheel.model.Project.ensureIsInstance(x__inp.Results.body);
            body = flywheel.ApiClient.encodeJson(body.toJson());

            resp = obj.apiClient.callApi('PUT', '/projects/{ProjectId}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse200.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = modifyProjectAnalysis(obj, projectId, analysisId, body, varargin)
            % Modify an analysis.
            % projectId (char)
            % analysisId (char)
            % body (AnalysisUpdate)
            % returns: [InlineResponse200, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'analysisId');
            addRequired(x__inp, 'body');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, analysisId, body, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end
            if ~isempty(x__inp.Results.analysisId)
                pathParams = [pathParams, 'AnalysisId', x__inp.Results.analysisId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = flywheel.model.AnalysisUpdate.ensureIsInstance(x__inp.Results.body);
            body = flywheel.ApiClient.encodeJson(body.toJson());

            resp = obj.apiClient.callApi('PUT', '/projects/{ProjectId}/analyses/{AnalysisId}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse200.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = modifyProjectFile(obj, projectId, fileName, body, varargin)
            % Modify a file's attributes
            % projectId (char)
            % fileName (char)
            % body (FileEntry)
            % returns: [InlineResponse2004, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'fileName');
            addRequired(x__inp, 'body');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, fileName, body, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end
            if ~isempty(x__inp.Results.fileName)
                pathParams = [pathParams, 'FileName', x__inp.Results.fileName];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = flywheel.model.FileEntry.ensureIsInstance(x__inp.Results.body);
            body = flywheel.ApiClient.encodeJson(body.toJson());

            resp = obj.apiClient.callApi('PUT', '/projects/{ProjectId}/files/{FileName}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse2004.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = modifyProjectFileClassification(obj, projectId, fileName, body, varargin)
            % Update classification for a particular file.
            % projectId (char)
            % fileName (char)
            % body (ClassificationUpdateInput)
            % returns: [InlineResponse2004, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'fileName');
            addRequired(x__inp, 'body');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, fileName, body, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end
            if ~isempty(x__inp.Results.fileName)
                pathParams = [pathParams, 'FileName', x__inp.Results.fileName];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = flywheel.model.ClassificationUpdateInput.ensureIsInstance(x__inp.Results.body);
            body = flywheel.ApiClient.encodeJson(body.toJson());

            resp = obj.apiClient.callApi('POST', '/projects/{ProjectId}/files/{FileName}/classification', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse2004.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = modifyProjectFileInfo(obj, projectId, fileName, body, varargin)
            % Update info for a particular file.
            % projectId (char)
            % fileName (char)
            % body (InfoUpdateInput)
            % returns: [InlineResponse200, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'fileName');
            addRequired(x__inp, 'body');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, fileName, body, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end
            if ~isempty(x__inp.Results.fileName)
                pathParams = [pathParams, 'FileName', x__inp.Results.fileName];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = flywheel.model.InfoUpdateInput.ensureIsInstance(x__inp.Results.body);
            body = flywheel.ApiClient.encodeJson(body.toJson());

            resp = obj.apiClient.callApi('POST', '/projects/{ProjectId}/files/{FileName}/info', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse200.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = modifyProjectInfo(obj, projectId, body, varargin)
            % Update or replace info for a project.
            % projectId (char)
            % body (InfoUpdateInput)
            % returns: [none, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'body');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, body, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = flywheel.model.InfoUpdateInput.ensureIsInstance(x__inp.Results.body);
            body = flywheel.ApiClient.encodeJson(body.toJson());

            resp = obj.apiClient.callApi('POST', '/projects/{ProjectId}/info', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = modifyProjectNote(obj, projectId, noteId, body, varargin)
            % Update a note on project.
            % projectId (char)
            % noteId (char)
            % body (Note)
            % returns: [InlineResponse200, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'noteId');
            addRequired(x__inp, 'body');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, noteId, body, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end
            if ~isempty(x__inp.Results.noteId)
                pathParams = [pathParams, 'NoteId', x__inp.Results.noteId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = flywheel.model.Note.ensureIsInstance(x__inp.Results.body);
            body = flywheel.ApiClient.encodeJson(body.toJson());

            resp = obj.apiClient.callApi('PUT', '/projects/{ProjectId}/notes/{NoteId}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse200.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = modifyProjectRule(obj, projectId, ruleId, body, varargin)
            % Update a rule on a project.
            % projectId (char)
            % ruleId (char)
            % body (Rule)
            % returns: [none, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'ruleId');
            addRequired(x__inp, 'body');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, ruleId, body, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end
            if ~isempty(x__inp.Results.ruleId)
                pathParams = [pathParams, 'RuleId', x__inp.Results.ruleId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = flywheel.model.Rule.ensureIsInstance(x__inp.Results.body);
            body = flywheel.ApiClient.encodeJson(body.toJson());

            resp = obj.apiClient.callApi('PUT', '/projects/{ProjectId}/rules/{RuleId}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = modifyProjectUserPermission(obj, projectId, userId, body, varargin)
            % Update a user's permission for this project.
            % projectId (char)
            % userId (char)
            % body (Permission)
            % returns: [InlineResponse200, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'userId');
            addRequired(x__inp, 'body');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, userId, body, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end
            if ~isempty(x__inp.Results.userId)
                pathParams = [pathParams, 'UserId', x__inp.Results.userId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = flywheel.model.Permission.ensureIsInstance(x__inp.Results.body);
            body = flywheel.ApiClient.encodeJson(body.toJson());

            resp = obj.apiClient.callApi('PUT', '/projects/{ProjectId}/permissions/{UserId}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse200.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = projectPackfileUpload(obj, projectId, token, file, varargin)
            % Add files to an in-progress packfile
            % projectId (char)
            % token (char)
            % file (char)
            % returns: [vector[FileEntry], resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'token');
            addRequired(x__inp, 'file');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, token, file, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end

            % Query parameters
            queryParams = {};
            if ~isempty(x__inp.Results.token)
                queryParams = [queryParams, 'token', flywheel.ApiClient.castParam(x__inp.Results.token, 'char')];
            end

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};
            if ~isempty(x__inp.Results.file)
                files = [files, flywheel.FileSpec.parametrize(x__inp.Results.file)];
            end

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('POST', '/projects/{ProjectId}/packfile', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.ModelBase.cellmap(@(x) flywheel.model.FileEntry.fromJson(x, obj.context_), json);
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = recalcAllProjects(obj, varargin)
            % Recalculate all sessions against their project templates.
            % returns: [SessionTemplateRecalcOutput, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, varargin{:});

            % Path parameters
            pathParams = {};

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('POST', '/projects/recalc', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.SessionTemplateRecalcOutput.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = recalcProject(obj, projectId, varargin)
            % Recalculate if sessions in the project satisfy the template.
            % projectId (char)
            % returns: [SessionTemplateRecalcOutput, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('POST', '/projects/{ProjectId}/recalc', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.SessionTemplateRecalcOutput.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = removeProjectRule(obj, projectId, ruleId, varargin)
            % Remove a project rule.
            % projectId (char)
            % ruleId (char)
            % returns: [InlineResponse2002, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'ruleId');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, ruleId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end
            if ~isempty(x__inp.Results.ruleId)
                pathParams = [pathParams, 'RuleId', x__inp.Results.ruleId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('DELETE', '/projects/{ProjectId}/rules/{RuleId}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse2002.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = removeProjectTemplate(obj, projectId, varargin)
            % Remove the session template for a project.
            % projectId (char)
            % returns: [InlineResponse2002, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('DELETE', '/projects/{ProjectId}/template', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse2002.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = renameProjectTag(obj, projectId, tagValue, body, varargin)
            % Rename a tag.
            % projectId (char)
            % tagValue (char):The tag to interact with
            % body (Tag)
            % returns: [InlineResponse200, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'tagValue');
            addRequired(x__inp, 'body');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, tagValue, body, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end
            if ~isempty(x__inp.Results.tagValue)
                pathParams = [pathParams, 'TagValue', x__inp.Results.tagValue];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = flywheel.model.Tag.ensureIsInstance(x__inp.Results.body);
            body = flywheel.ApiClient.encodeJson(body.toJson());

            resp = obj.apiClient.callApi('PUT', '/projects/{ProjectId}/tags/{TagValue}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse200.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = replaceProjectFile(obj, projectId, fileName, varargin)
            % Replace a file
            % projectId (char)
            % fileName (char)
            % returns: [none, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'fileName');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, fileName, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end
            if ~isempty(x__inp.Results.fileName)
                pathParams = [pathParams, 'FileName', x__inp.Results.fileName];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('POST', '/projects/{ProjectId}/files/{FileName}', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = setProjectTemplate(obj, projectId, body, varargin)
            % Set the session template for a project.
            % projectId (char)
            % body (vector[ProjectTemplateSessionTemplate])
            % returns: [InlineResponse200, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'body');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, body, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = flywheel.ModelBase.cellmap(@(x) flywheel.model.ProjectTemplateSessionTemplate.ensureIsInstance(x), x__inp.Results.body);
            body = flywheel.ApiClient.encodeJson(body.toJson());

            resp = obj.apiClient.callApi('POST', '/projects/{ProjectId}/template', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.InlineResponse200.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = startProjectPackfileUpload(obj, projectId, varargin)
            % Start a packfile upload to project
            % projectId (char)
            % returns: [PackfileStart, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('POST', '/projects/{ProjectId}/packfile-start', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                case '200'
                    if x__inp.Results.DumpResponseData
                        x__respData = resp.getBodyAsString();
                        disp(x__respData);
                    end
                    json = flywheel.ApiClient.getResponseJson(resp);
                    returnData = flywheel.model.PackfileStart.fromJson(json, obj.context_);
                    if ~isempty(returnData)
                        returnData = returnData.returnValue();
                    end
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = uploadFileToProject(obj, projectId, file, varargin)
            % Upload a file to project.
            % projectId (char)
            % file (char):The file to upload
            % metadata (char):File metadata
            % returns: [none, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'file');
            addParameter(x__inp, 'metadata', []);
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, file, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};
            if ~isempty(x__inp.Results.file)
                files = [files, flywheel.FileSpec.parametrize(x__inp.Results.file)];
            end
            if ~isempty(x__inp.Results.metadata)
                formParams = [formParams, 'metadata', x__inp.Results.metadata];
            end

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('POST', '/projects/{ProjectId}/files', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                otherwise
                    returnData = [];
            end
        end

        function [returnData, resp] = uploadOutputToProjectAnalysis(obj, projectId, analysisId, file, varargin)
            % Upload an output file to analysis.
            % projectId (char)
            % analysisId (char)
            % file (char):The file to upload
            % returns: [none, resp]

            x__inp = inputParser;
            x__inp.StructExpand = false;
            addRequired(x__inp, 'projectId');
            addRequired(x__inp, 'analysisId');
            addRequired(x__inp, 'file');
            addParameter(x__inp, 'DumpResponseData', false);
            parse(x__inp, projectId, analysisId, file, varargin{:});

            % Path parameters
            pathParams = {};
            if ~isempty(x__inp.Results.projectId)
                pathParams = [pathParams, 'ProjectId', x__inp.Results.projectId];
            end
            if ~isempty(x__inp.Results.analysisId)
                pathParams = [pathParams, 'AnalysisId', x__inp.Results.analysisId];
            end

            % Query parameters
            queryParams = {};

            % Header parameters
            headers = {};

            % Form parameters
            formParams = {};
            files = {};
            if ~isempty(x__inp.Results.file)
                files = [files, flywheel.FileSpec.parametrize(x__inp.Results.file)];
            end

            % Body (as JSON)
            body = {};

            resp = obj.apiClient.callApi('POST', '/projects/{ProjectId}/analyses/{AnalysisId}/files', ...
                pathParams, queryParams, headers, body, formParams, files);

            status = resp.getStatusCode();

            switch num2str(status)
                otherwise
                    returnData = [];
            end
        end

    end
end
